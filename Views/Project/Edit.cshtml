@model StudentFreelance.ViewModels.ProjectViewModel
<link rel="stylesheet" href="~/css/project/edit.css" />

@{
    ViewData["Title"] = "Edit Project";
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-controller="Project" asp-action="Index">Projects</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Project</li>
        </ol>
    </nav>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Edit Project</h5>
                </div>
                <div class="card-body">
                    @if (TempData["AttachmentError"] != null)
                    {
                        <div class="alert alert-warning">@TempData["AttachmentError"]</div>
                    }
                    <form asp-action="Edit" enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="ProjectID" />
                        <input type="hidden" asp-for="BusinessID" />
                        <input type="hidden" asp-for="IsEdit" value="true" />
                        <input type="hidden" id="hiddenCategoryId" name="CategoryID" value="@Model.CategoryID" />
                        <div id="skillIdsContainer">
                            @foreach (var skillId in Model.SelectedSkills)
                            {
                                <input type="hidden" name="SelectedSkills" value="@skillId" />
                            }
                        </div>

                        <div class="row">
                            <div class="col-md-8">
                                <div class="form-group mb-3">
                                    <label asp-for="Title" class="control-label"></label>
                                    <input asp-for="Title" class="form-control" />
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>

                                <div class="form-group mb-3">
                                    <label asp-for="Description" class="control-label"></label>
                                    <textarea asp-for="Description" class="form-control" rows="6"></textarea>
                                    <span asp-validation-for="Description" class="text-danger"></span>
                                </div>

                                <!-- Existing Attachments -->
                                @if (Model.ExistingAttachments != null && Model.ExistingAttachments.Any())
                                {
                                    <div class="card mb-3">
                                        <div class="card-header">
                                            <h6 class="mb-0">Current Attachments</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="list-group">
                                                @foreach (var attachment in Model.ExistingAttachments)
                                                {
                                                    <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                                        <a href="@attachment.FilePath" download>
                                                            <i class="bi bi-file-earmark"></i> @attachment.FileName
                                                            <small>(@(attachment.FileSize / 1024) KB)</small>
                                                        </a>
                                                        <form asp-action="DeleteAttachment" method="post" onsubmit="return confirm('Are you sure you want to delete this attachment?');">
                                                            <input type="hidden" name="attachmentId" value="@attachment.AttachmentID" />
                                                            <input type="hidden" name="projectId" value="@Model.ProjectID" />
                                                            <button type="submit" class="btn btn-sm btn-outline-danger">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </form>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }

                                <!-- Upload New Attachments -->
                                <div class="form-group mb-3">
                                    <label asp-for="Attachments" class="control-label">Upload New Attachments</label>
                                    <input type="file" asp-for="Attachments" class="form-control" multiple />
                                    <small class="form-text text-muted">You can upload multiple files (max 5MB per file)</small>
                                </div>

                                <!-- Required Skills -->
                                <div class="form-group mb-3">
                                    <label class="control-label">Nhóm nghề, Nghề, Vị trí chuyên môn</label>
                                    <div class="category-skills-dropdown">
                                        <button type="button" class="btn btn-outline-secondary w-100 text-start d-flex justify-content-between align-items-center" id="dropdownCategorySkillsBtn">
                                            <span id="selectedCategorySkill">
                                                @{
                                                    var selectedSkills = Model.Skills.Where(s => Model.SelectedSkills.Contains(s.SkillID)).ToList();
                                                    if (selectedSkills.Any())
                                                    {
                                                        if (selectedSkills.Count == 1)
                                                        {
                                                            <span>@selectedSkills.First().SkillName</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@selectedSkills.Count vị trí chuyên môn</span>
                                                        }
                                                    }
                                                    else if (Model.CategoryID != 0)
                                                    {
                                                        var selectedCategory = Model.Categories.FirstOrDefault(c => c.CategoryID == Model.CategoryID);
                                                        if (selectedCategory != null)
                                                        {
                                                            <span>@selectedCategory.CategoryName</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Chọn Nhóm nghề, Nghề hoặc Chuyên môn</span>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span>Chọn Nhóm nghề, Nghề hoặc Chuyên môn</span>
                                                    }
                                                }
                                            </span>
                                            <i class="bi bi-chevron-down"></i>
                                        </button>
                                        <div class="category-skills-container" id="categorySkillsContainer">
                                            <div class="card">
                                                <div class="card-body p-0">
                                                    <div class="container-fluid">
                                                        <div class="row">
                                                            <!-- Cột danh mục -->
                                                            <div class="col-md-4 p-0 category-list">
                                                                <div class="list-group list-group-flush">
                                                                    <div class="list-group-item fw-bold bg-light text-dark">NHÓM NGHỀ</div>
                                                                    @foreach (var category in Model.Categories.Where(c => c.ParentCategoryID == null))
                                                                    {
                                                                        string activeClass = Model.CategoryID == category.CategoryID ? "active" : "";
                                                                        <a href="#" class="list-group-item list-group-item-action category-item @activeClass" data-category-id="@category.CategoryID">
                                                                            @category.CategoryName
                                                                        </a>
                                                                    }
                                                                </div>
                                                            </div>
                                                            <!-- Cột danh mục con -->
                                                            <div class="col-md-4 p-0 subcategory-list">
                                                                <div class="list-group list-group-flush">
                                                                    <div class="list-group-item fw-bold bg-light text-dark">NGHỀ</div>
                                                                    @foreach (var mainCategory in Model.Categories.Where(c => c.ParentCategoryID == null))
                                                                    {
                                                                        <div class="subcategory-group" id="subcategory-@mainCategory.CategoryID" style="display: @(Model.CategoryID == mainCategory.CategoryID ? "block" : "none");">
                                                                            @{
                                                                                var categorySubCategories = Model.Categories.Where(sc => sc.ParentCategoryID == mainCategory.CategoryID).ToList();
                                                                                if (categorySubCategories.Any())
                                                                                {
                                                                                    foreach (var subCategory in categorySubCategories)
                                                                                    {
                                                                                        string activeClass = Model.CategoryID == subCategory.CategoryID ? "active" : "";
                                                                                        <a href="#" class="list-group-item list-group-item-action subcategory-item @activeClass" data-subcategory-id="@subCategory.CategoryID" data-parent-id="@mainCategory.CategoryID">
                                                                                            @subCategory.CategoryName
                                                                                        </a>
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    <div class="list-group-item">Không có nghề con</div>
                                                                                }
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </div>
                                                            <!-- Cột kỹ năng -->
                                                            <div class="col-md-4 p-0 skill-list">
                                                                <div class="list-group list-group-flush">
                                                                    <div class="list-group-item fw-bold bg-light text-dark">VỊ TRÍ CHUYÊN MÔN</div>
                                                                    <div class="selected-skills-container @(selectedSkills.Any() ? "" : "d-none")">
                                                                        <div class="list-group-item bg-light text-dark">
                                                                            <small>Đã chọn (<span id="selectedSkillsCount">@selectedSkills.Count</span>)</small>
                                                                        </div>
                                                                        <div id="selectedSkillsList" class="selected-skills-list">
                                                                            @foreach (var skill in selectedSkills)
                                                                            {
                                                                                <a href="#" class="list-group-item list-group-item-action skill-item selected" data-skill-id="@skill.SkillID" data-category-id="@skill.CategoryID">
                                                                                    <div class="d-flex justify-content-between align-items-center">
                                                                                        <span>@skill.SkillName</span>
                                                                                        <i class="bi bi-check-lg text-success"></i>
                                                                                    </div>
                                                                                </a>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                    @foreach (var category in Model.Categories)
                                                                    {
                                                                        <div class="skill-group" id="skills-@category.CategoryID" style="display: none;">
                                                                            @if (Model.Skills.Any(s => s.CategoryID == category.CategoryID))
                                                                            {
                                                                                var orderedSkills = Model.Skills.Where(s => s.CategoryID == category.CategoryID).OrderBy(s => s.SkillName).ToList();
                                                                                foreach (var skill in orderedSkills)
                                                                                {
                                                                                    string selectedClass = Model.SelectedSkills.Contains(skill.SkillID) ? "selected" : "";
                                                                                    <a href="#" class="list-group-item list-group-item-action skill-item @selectedClass" data-skill-id="@skill.SkillID" data-category-id="@category.CategoryID" data-skill-name="@skill.SkillName">
                                                                                        <div class="d-flex justify-content-between align-items-center">
                                                                                            <span>@skill.SkillName</span>
                                                                                            @if (Model.SelectedSkills.Contains(skill.SkillID))
                                                                                            {
                                                                                                <i class="bi bi-check-lg text-success"></i>
                                                                                            }
                                                                                        </div>
                                                                                    </a>
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="list-group-item">Không có kỹ năng</div>
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-footer bg-light p-2 d-flex justify-content-between">
                                                    <button type="button" class="btn btn-outline-secondary" id="clearCategorySkill">Hủy</button>
                                                    <button type="button" class="btn btn-primary" id="applyCategorySkill">Chọn</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group mb-3">
                                    <label asp-for="Budget" class="control-label"></label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input asp-for="Budget" class="form-control" />
                                    </div>
                                    <span asp-validation-for="Budget" class="text-danger"></span>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group mb-3">
                                            <label asp-for="StartDate" class="control-label"></label>
                                            <input asp-for="StartDate" class="form-control" type="date" />
                                            <span asp-validation-for="StartDate" class="text-danger"></span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group mb-3">
                                            <label asp-for="EndDate" class="control-label"></label>
                                            <input asp-for="EndDate" class="form-control" type="date" />
                                            <span asp-validation-for="EndDate" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group mb-3">
                                    <label asp-for="Deadline" class="control-label"></label>
                                    <input asp-for="Deadline" class="form-control" type="date" />
                                    <span asp-validation-for="Deadline" class="text-danger"></span>
                                </div>

                                <div class="form-group mb-3">
                                    <label asp-for="StatusID" class="control-label"></label>
                                    <select asp-for="StatusID" class="form-select">
                                        @foreach (var status in Model.ProjectStatuses)
                                        {
                                            <option value="@status.StatusID">@status.StatusName</option>
                                        }
                                    </select>
                                    <span asp-validation-for="StatusID" class="text-danger"></span>
                                </div>

                                <div class="form-group mb-3">
                                    <label asp-for="TypeID" class="control-label"></label>
                                    <select asp-for="TypeID" class="form-select">
                                        @foreach (var type in Model.ProjectTypes)
                                        {
                                            <option value="@type.TypeID">@type.TypeName</option>
                                        }
                                    </select>
                                    <span asp-validation-for="TypeID" class="text-danger"></span>
                                </div>

                                <div class="form-check mb-3">
                                    <input asp-for="IsRemoteWork" class="form-check-input" id="isRemoteWorkCheckbox" />
                                    <label asp-for="IsRemoteWork" class="form-check-label"></label>
                                    <small class="form-text text-muted d-block">Nếu không chọn, địa chỉ doanh nghiệp sẽ được sử dụng.</small>
                                </div>

                                <div class="form-group mb-3" id="addressSelectGroup" style="display: @(Model.IsRemoteWork ? "none" : "block")">
                                    <label for="addressIdField">Địa chỉ doanh nghiệp</label>
                                    <select id="addressIdField" name="AddressID" class="form-select">
                                        @foreach (var address in ViewBag.BusinessAddresses ?? new List<StudentFreelance.Models.Address>())
                                        {
                                            var isSelected = Model.AddressID == address.AddressID ? "selected" : "";
                                            <option value="@address.AddressID" selected="@isSelected">
                                                @(string.IsNullOrEmpty(address.FullAddress) ? $"{address.DetailAddress}, {address.WardName}, {address.DistrictName}, {address.ProvinceName}" : address.FullAddress)
                                            </option>
                                        }
                                    </select>
                                    <span asp-validation-for="AddressID" class="text-danger"></span>
                                </div>

                                <div class="form-check mb-3">
                                    <input asp-for="IsHighlighted" class="form-check-input" />
                                    <label asp-for="IsHighlighted" class="form-check-label"></label>
                                </div>
                            </div>
                        </div>

                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-primary" id="saveProjectBtn">Save Changes</button>
                            <a asp-action="Details" asp-route-id="@Model.ProjectID" class="btn btn-outline-secondary ms-2">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Xác nhận trước khi cập nhật dự án
            const editForm = document.querySelector('form[action^="/Project/Edit"]');
            const saveProjectBtn = document.getElementById('saveProjectBtn');
            const budgetInput = document.getElementById('Budget');

            if (editForm && budgetInput) {
                const originalBudget = parseFloat(budgetInput.value.replace(/,/g, ''));

                editForm.addEventListener('submit', function(e) {
                    e.preventDefault();

                    // Kiểm tra form validation trước
                    if (!editForm.checkValidity()) {
                        editForm.reportValidity();
                        return;
                    }

                    const newBudget = parseFloat(budgetInput.value.replace(/,/g, ''));
                    if (isNaN(newBudget)) {
                        alert('Vui lòng nhập ngân sách hợp lệ.');
                        return;
                    }

                    // So sánh ngân sách cũ và mới
                    const budgetDifference = newBudget - originalBudget;

                    let confirmMessage = 'Xác nhận cập nhật dự án?';

                    if (budgetDifference > 0) {
                        // Tính phí cho phần ngân sách tăng thêm
                        let fee = 0;
                        let feeRate = 0;

                        if (budgetDifference <= 100000) {
                            feeRate = 5;
                            fee = budgetDifference * 0.05;
                            if (fee < 5000) fee = 5000;
                        } else if (budgetDifference <= 500000) {
                            feeRate = 4;
                            fee = budgetDifference * 0.04;
                        } else if (budgetDifference <= 1000000) {
                            feeRate = 3;
                            fee = budgetDifference * 0.03;
                        } else if (budgetDifference <= 5000000) {
                            feeRate = 2.5;
                            fee = budgetDifference * 0.025;
                        } else {
                            feeRate = 2;
                            fee = budgetDifference * 0.02;
                            if (fee > 200000) fee = 200000;
                        }

                        // Làm tròn lên đến 1.000 VND
                        fee = Math.ceil(fee / 1000) * 1000;

                        const totalAmount = budgetDifference + fee;

                        // Ngân sách tăng, tiền sẽ bị trừ từ ví
                        const formattedDifference = new Intl.NumberFormat('vi-VN').format(budgetDifference);
                        const formattedFee = new Intl.NumberFormat('vi-VN').format(fee);
                        const formattedTotal = new Intl.NumberFormat('vi-VN').format(totalAmount);

                        confirmMessage += `\n\nTăng ngân sách: ${formattedDifference} VND\nPhí bổ sung (${feeRate}%): ${formattedFee} VND\nTổng cộng: ${formattedTotal} VND\n\nKhi thực hiện hành động này, số tiền ${formattedTotal} VND sẽ được trừ từ ví của bạn.`;
                    } else if (budgetDifference < 0) {
                        // Ngân sách giảm, tiền sẽ được hoàn lại vào ví
                        const formattedDifference = new Intl.NumberFormat('vi-VN').format(Math.abs(budgetDifference));
                        confirmMessage += `\n\nKhi thực hiện hành động này, số tiền ${formattedDifference} VND sẽ được hoàn lại vào ví của bạn do giảm ngân sách dự án.`;
                    }

                    confirmMessage += '\n\nBạn có chắc chắn muốn tiếp tục?';

                    if (confirm(confirmMessage)) {
                        editForm.submit();
                    }
                });
            }

            // Các phần tử DOM
            const dropdownBtn = document.getElementById('dropdownCategorySkillsBtn');
            const container = document.getElementById('categorySkillsContainer');
            const categoryItems = document.querySelectorAll('.category-item');
            const subcategoryItems = document.querySelectorAll('.subcategory-item');
            const skillItems = document.querySelectorAll('.skill-item');
            const clearBtn = document.getElementById('clearCategorySkill');
            const applyBtn = document.getElementById('applyCategorySkill');
            const selectedSkillsContainer = document.querySelector('.selected-skills-container');
            const selectedSkillsList = document.getElementById('selectedSkillsList');
            const selectedSkillsCount = document.getElementById('selectedSkillsCount');
            const skillIdsContainer = document.getElementById('skillIdsContainer');

            let selectedCategoryId = document.getElementById('hiddenCategoryId').value || null;
            let selectedSkillIds = Array.from(document.querySelectorAll('input[name="SelectedSkills"]')).map(input => input.value);
            let isDropdownOpen = false;

            // Hàm hiển thị/ẩn dropdown
            function toggleDropdown() {
                isDropdownOpen = !isDropdownOpen;
                if (isDropdownOpen) {
                    container.classList.add('show');
                    dropdownBtn.classList.add('active');
                } else {
                    container.classList.remove('show');
                    dropdownBtn.classList.remove('active');
                }
            }

            // Mở dropdown khi click vào button
            dropdownBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                toggleDropdown();
            });

            // Ngăn dropdown đóng khi click vào nội dung dropdown
            container.addEventListener('click', function(e) {
                e.stopPropagation();
            });

            // Hiển thị danh mục con khi chọn danh mục chính
            categoryItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Xóa trạng thái active của tất cả danh mục
                    categoryItems.forEach(ci => ci.classList.remove('active'));

                    // Thêm trạng thái active cho danh mục được chọn
                    this.classList.add('active');

                    const categoryId = this.dataset.categoryId;
                    selectedCategoryId = categoryId;

                    // Ẩn tất cả danh mục con và hiển thị danh mục con của danh mục được chọn
                    document.querySelectorAll('.subcategory-group').forEach(group => {
                        group.style.display = 'none';
                    });

                    const subcategoryGroup = document.getElementById(`subcategory-${categoryId}`);
                    if (subcategoryGroup) {
                        subcategoryGroup.style.display = 'block';
                    }

                    // Hiển thị kỹ năng của danh mục được chọn
                    document.querySelectorAll('.skill-group').forEach(group => {
                        group.style.display = 'none';
                    });

                    const skillGroup = document.getElementById(`skills-${categoryId}`);
                    if (skillGroup) {
                        skillGroup.style.display = 'block';
                    }

                    // Xóa trạng thái active của tất cả danh mục con
                    subcategoryItems.forEach(sci => sci.classList.remove('active'));
                });
            });

            // Hiển thị kỹ năng khi chọn danh mục con
            subcategoryItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Xóa trạng thái active của tất cả danh mục con
                    subcategoryItems.forEach(sci => sci.classList.remove('active'));

                    // Thêm trạng thái active cho danh mục con được chọn
                    this.classList.add('active');

                    const subcategoryId = this.dataset.subcategoryId;
                    selectedCategoryId = subcategoryId;

                    // Hiển thị kỹ năng của danh mục con được chọn
                    document.querySelectorAll('.skill-group').forEach(group => {
                        group.style.display = 'none';
                    });

                    const skillGroup = document.getElementById(`skills-${subcategoryId}`);
                    if (skillGroup) {
                        skillGroup.style.display = 'block';
                    }
                });
            });

            // Hàm cập nhật danh sách kỹ năng đã chọn
            function updateSelectedSkillsList() {
                // Xóa tất cả các phần tử con hiện tại
                while (selectedSkillsList.firstChild) {
                    selectedSkillsList.removeChild(selectedSkillsList.firstChild);
                }

                // Xóa tất cả input hidden hiện tại
                while (skillIdsContainer.firstChild) {
                    skillIdsContainer.removeChild(skillIdsContainer.firstChild);
                }

                // Hiển thị hoặc ẩn container dựa trên số lượng kỹ năng đã chọn
                if (selectedSkillIds.length > 0) {
                    selectedSkillsContainer.classList.remove('d-none');
                } else {
                    selectedSkillsContainer.classList.add('d-none');
                }

                // Cập nhật số lượng kỹ năng đã chọn
                selectedSkillsCount.textContent = selectedSkillIds.length;

                // Thêm các kỹ năng đã chọn vào danh sách
                selectedSkillIds.forEach(skillId => {
                    const skillItem = document.querySelector(`.skill-item[data-skill-id="${skillId}"]`);
                    if (skillItem) {
                        const skillName = skillItem.dataset.skillName || skillItem.querySelector('span').textContent;
                        const categoryId = skillItem.dataset.categoryId;

                        // Tạo phần tử mới cho danh sách kỹ năng đã chọn
                        const newSkillItem = document.createElement('a');
                        newSkillItem.href = '#';
                        newSkillItem.className = 'list-group-item list-group-item-action skill-item selected';
                        newSkillItem.dataset.skillId = skillId;
                        newSkillItem.dataset.categoryId = categoryId;
                        newSkillItem.dataset.skillName = skillName;

                        const itemContent = document.createElement('div');
                        itemContent.className = 'd-flex justify-content-between align-items-center';

                        const nameSpan = document.createElement('span');
                        nameSpan.textContent = skillName;

                        const checkIcon = document.createElement('i');
                        checkIcon.className = 'bi bi-check-lg text-success';

                        itemContent.appendChild(nameSpan);
                        itemContent.appendChild(checkIcon);
                        newSkillItem.appendChild(itemContent);

                        // Thêm sự kiện click để bỏ chọn kỹ năng
                        newSkillItem.addEventListener('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            toggleSkillSelection(skillId);
                        });

                        selectedSkillsList.appendChild(newSkillItem);

                        // Tạo input hidden cho kỹ năng đã chọn
                        const hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.name = 'SelectedSkills';
                        hiddenInput.value = skillId;
                        skillIdsContainer.appendChild(hiddenInput);
                    }
                });
            }

            // Hàm chọn/bỏ chọn kỹ năng
            function toggleSkillSelection(skillId) {
                const index = selectedSkillIds.indexOf(skillId);
                const skillItems = document.querySelectorAll(`.skill-item[data-skill-id="${skillId}"]`);

                if (index === -1) {
                    // Thêm kỹ năng vào danh sách đã chọn
                    selectedSkillIds.push(skillId);
                    skillItems.forEach(item => {
                        item.classList.add('selected');

                        // Thêm icon check nếu chưa có
                        if (!item.querySelector('.bi-check-lg')) {
                            const itemContent = item.querySelector('div') || item;
                            const checkIcon = document.createElement('i');
                            checkIcon.className = 'bi bi-check-lg text-success';
                            itemContent.appendChild(checkIcon);
                        }
                    });
                } else {
                    // Xóa kỹ năng khỏi danh sách đã chọn
                    selectedSkillIds.splice(index, 1);
                    skillItems.forEach(item => {
                        item.classList.remove('selected');

                        // Xóa icon check
                        const checkIcon = item.querySelector('.bi-check-lg');
                        if (checkIcon) {
                            checkIcon.remove();
                        }
                    });
                }

                // Cập nhật danh sách kỹ năng đã chọn
                updateSelectedSkillsList();
            }

            // Chọn/bỏ chọn kỹ năng
            skillItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    const skillId = this.dataset.skillId;
                    toggleSkillSelection(skillId);
                });
            });

            // Xử lý nút Hủy
            clearBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                selectedCategoryId = null;
                selectedSkillIds = [];

                // Xóa trạng thái active của tất cả danh mục, danh mục con
                categoryItems.forEach(ci => ci.classList.remove('active'));
                subcategoryItems.forEach(sci => sci.classList.remove('active'));

                // Xóa trạng thái selected của tất cả kỹ năng
                skillItems.forEach(si => {
                    si.classList.remove('selected');
                    const checkIcon = si.querySelector('.bi-check-lg');
                    if (checkIcon) {
                        checkIcon.remove();
                    }
                });

                // Cập nhật giá trị hiển thị
                document.getElementById('selectedCategorySkill').innerText = 'Chọn Nhóm nghề, Nghề hoặc Chuyên môn';

                // Cập nhật giá trị input hidden
                document.getElementById('hiddenCategoryId').value = '';

                // Cập nhật danh sách kỹ năng đã chọn
                updateSelectedSkillsList();
            });

            // Xử lý nút Chọn
            applyBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                // Cập nhật giá trị input hidden
                document.getElementById('hiddenCategoryId').value = selectedCategoryId || '';

                // Cập nhật giá trị hiển thị
                let displayText = 'Chọn Nhóm nghề, Nghề hoặc Chuyên môn';

                if (selectedSkillIds.length > 0) {
                    if (selectedSkillIds.length === 1) {
                        const selectedSkill = document.querySelector(`.skill-item[data-skill-id="${selectedSkillIds[0]}"]`);
                        if (selectedSkill) {
                            displayText = selectedSkill.dataset.skillName || selectedSkill.querySelector('span').textContent;
                        }
                    } else {
                        displayText = `${selectedSkillIds.length} vị trí chuyên môn`;
                    }
                } else if (selectedCategoryId) {
                    const selectedCategory = document.querySelector(`.category-item[data-category-id="${selectedCategoryId}"]`);
                    const selectedSubcategory = document.querySelector(`.subcategory-item[data-subcategory-id="${selectedCategoryId}"]`);

                    if (selectedSubcategory) {
                        displayText = selectedSubcategory.innerText;
                    } else if (selectedCategory) {
                        displayText = selectedCategory.innerText;
                    }
                }

                document.getElementById('selectedCategorySkill').innerText = displayText;

                // Đóng dropdown
                isDropdownOpen = false;
                container.classList.remove('show');
                dropdownBtn.classList.remove('active');
            });

            // Hiển thị ban đầu nếu có giá trị được chọn
            if (selectedCategoryId) {
                // Tìm và kích hoạt danh mục được chọn
                const selectedCategory = document.querySelector(`.category-item[data-category-id="${selectedCategoryId}"]`);
                const selectedSubcategory = document.querySelector(`.subcategory-item[data-subcategory-id="${selectedCategoryId}"]`);

                if (selectedSubcategory) {
                    // Nếu là danh mục con, kích hoạt danh mục cha trước
                    const parentId = selectedSubcategory.dataset.parentId;
                    const parentCategory = document.querySelector(`.category-item[data-category-id="${parentId}"]`);
                    if (parentCategory) {
                        parentCategory.click();
                    }
                    selectedSubcategory.click();
                } else if (selectedCategory) {
                    selectedCategory.click();
                }
            }

            // Cập nhật danh sách kỹ năng đã chọn ban đầu
            updateSelectedSkillsList();

            // Đóng dropdown khi click ra ngoài
            document.addEventListener('click', function() {
                if (isDropdownOpen) {
                    isDropdownOpen = false;
                    container.classList.remove('show');
                    dropdownBtn.classList.remove('active');
                }
            });
            // Logic for handling remote work checkbox
            const remoteWorkCheckbox = document.getElementById('isRemoteWorkCheckbox');
            const addressSelectGroup = document.getElementById('addressSelectGroup');
            const addressIdField = document.getElementById('addressIdField');
            function updateAddressVisibility() {
                if (remoteWorkCheckbox.checked) {
                    addressSelectGroup.style.display = 'none';
                    addressIdField.value = '';
                } else {
                    addressSelectGroup.style.display = 'block';
                    // Nếu chưa chọn thì chọn địa chỉ đầu tiên
                    if (!addressIdField.value && addressIdField.options.length > 0) {
                        addressIdField.value = addressIdField.options[0].value;
                    }
                }
            }
            updateAddressVisibility();
            remoteWorkCheckbox.addEventListener('change', updateAddressVisibility);
        });
    </script>
} 