@{
    ViewData["Title"] = "Trang chủ";
}
@{
    var topProjects = ViewBag.TopProjects as List<StudentFreelance.Models.Project>;
    var popularBusinesses = ViewBag.PopularBusinesses as List<StudentFreelance.Models.ApplicationUser>;
}
@section Styles {
    <link rel="stylesheet" href="~/css/home/home.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
}

<!-- Hero Section -->
<section class="hero-slideshow">
    <!-- Slideshow Background -->
    <div class="slideshow-container">
        @{
            var defaultImages = new List<string> { "bg1.png", "bg2.png", "bg3.png", "bg4.png", "bg5.png", "bg6.png" };
            var advertisements = ViewBag.Advertisements as List<StudentFreelance.Models.Advertisement> ?? new List<StudentFreelance.Models.Advertisement>();
            
            // Display advertisements first
            foreach (var ad in advertisements)
            {
                string imageUrl = $"~/uploads/advertisements/{ad.ImagePath}";
                string linkUrl = $"/User/Profile/{ad.BusinessId}";
                bool isFirst = ad == advertisements.FirstOrDefault();
                
                <div class="slide @(isFirst ? "active" : "")" style="background-image: url('@Url.Content(imageUrl)')" data-slide-type="advertisement">
                    <a href="@linkUrl" class="ad-link" title="Xem thêm về @ad.Business.CompanyName"></a>
                </div>
            }
            
            // If there are fewer than 6 ads, display default images to fill up to 6 slides
            if (advertisements.Count < 6)
            {
                for (int i = 0; i < Math.Min(6 - advertisements.Count, defaultImages.Count); i++)
                {
                    bool isFirst = advertisements.Count == 0 && i == 0;
                    <div class="slide @(isFirst ? "active" : "")" style="background-image: url('@Url.Content($"~/image/{defaultImages[i]}")')" data-slide-type="default"></div>
                }
            }
        }
        
        <!-- Nội dung - will be shown/hidden based on slide type -->
        <div id="hero-container" class="hero-container" style="display: none;">
            <div class="hero-content">
                <h1 class="hero-title">Let top talent bring your ideas to life</h1>

                <div class="popular-searches">
                    <a asp-controller="Search" asp-action="SearchJob" asp-route-query="website development" class="tag">website development</a>
                    <a asp-controller="Search" asp-action="SearchJob" asp-route-query="architecture & interior design" class="tag">architecture & interior design</a>
                    <a asp-controller="Search" asp-action="SearchJob" asp-route-query="UGC videos" class="tag">UGC videos</a>
                    <a asp-controller="Search" asp-action="SearchJob" asp-route-query="video editing" class="tag">video editing</a>
                </div>

                <!-- Trusted By -->
                <div class="trusted-by">
                    <span class="trusted-text">Trusted by:</span>
                    <div class="trusted-companies">
                        <span>Meta</span>
                        <span>Google</span>
                        <span>Netflix</span>
                        <span>P&G</span>
                        <span>PayPal</span>
                        <span>Payoneer</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Navigation arrows -->
        <button class="slideshow-prev" aria-label="Previous slide">
            <i class="fas fa-chevron-left"></i>
        </button>
        <button class="slideshow-next" aria-label="Next slide">
            <i class="fas fa-chevron-right"></i>
        </button>
        
        <!-- Slide indicators -->
        <div class="slideshow-dots">
            @{
                int totalSlides = advertisements.Count;
                if (totalSlides < 6)
                {
                    totalSlides += Math.Min(6 - advertisements.Count, defaultImages.Count);
                }
                
                for (int i = 0; i < totalSlides; i++)
                {
                    bool isAd = i < advertisements.Count;
                    <span class="slideshow-dot @(i == 0 ? "active" : "")" data-slide="@i" data-slide-type="@(isAd ? "advertisement" : "default")"></span>
                }
            }
        </div>
    </div>
</section>

<!-- Top Projects Section -->
<section class="top-projects">
    <div class="container">
        <div class="section-header">
            <h2>Top Projects</h2>
            <a asp-controller ="Search" asp-action="SearchJob" class="view-all-btn">View all</a>
        </div>

        <div class="projects-grid">
            @foreach (var project in topProjects)
            {
                <a asp-controller="Project" asp-action="Details" asp-route-id="@project.ProjectID" class="text-decoration-none text-dark">
                    <div class="project-card">
                        <div class="project-image">
                            @if (project.Business != null && !string.IsNullOrEmpty(project.Business.Avatar))
                            {
                                <img src="@project.Business.Avatar" alt="@project.Business?.FullName" onerror="this.onerror=null; this.src='/image/default-avatar.png';" />
                            }
                            else
                            {
                                <img src="/image/default-avatar.png" alt="@project.Business?.FullName" />
                            }
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">@project.Title</h3>
                            <p class="company-name">@project.Business?.FullName</p>
                            <div class="project-meta">
                                <span class="salary">@($"{project.Budget:N0} đ")</span>
                                <span class="location">
                                    @(project.IsRemoteWork ? "Remote" : project.Address?.ProvinceName ?? "Unidentified location")
                                </span>
                            </div>
                            <div class="project-status hot">Hot</div>
                        </div>
                    </div>
                </a>
            }
        </div>
    </div>
</section>

<script>
    // Pagination functionality
    const prevBtn = document.querySelector('.pagination-btn.prev');
    const nextBtn = document.querySelector('.pagination-btn.next');
    const dots = document.querySelectorAll('.dot');
    let currentPage = 0;
    const totalPages = dots.length;

    function updatePagination() {
        // Update dots
        dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentPage);
        });

        // Update buttons
        prevBtn.disabled = currentPage === 0;
        nextBtn.disabled = currentPage === totalPages - 1;
    }

    prevBtn.addEventListener('click', () => {
        if (currentPage > 0) {
            currentPage--;
            updatePagination();
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentPage < totalPages - 1) {
            currentPage++;
            updatePagination();
        }
    });

    dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            currentPage = index;
            updatePagination();
        });
    });

    // Initialize pagination
    updatePagination();
</script>

<!-- Categories Section -->
<section class="categories">
    <div class="container">
        <div class="section-header">
            <h2>Categories</h2>
        </div>
        <div class="categories-grid">
            @{
                var parentCategories = ViewBag.ParentCategories as List<StudentFreelance.Models.Category> ?? new List<StudentFreelance.Models.Category>();
                
                // Dictionary để ánh xạ tên category với icon phù hợp
                var categoryIcons = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {
                    { "Programming & Tech", "fas fa-code" },
                    { "Graphics & Design", "fas fa-palette" },
                    { "Digital Marketing", "fas fa-chart-line" },
                    { "Writing & Translation", "fas fa-pen-fancy" },
                    { "Video & Animation", "fas fa-video" },
                    { "AI Services", "fas fa-robot" },
                    { "Music & Audio", "fas fa-music" },
                    { "Business", "fas fa-briefcase" },
                    // Thêm các ánh xạ mặc định cho các category khác
                    { "default", "fas fa-folder" }
                };
                
                foreach (var category in parentCategories)
                {
                    // Tìm icon phù hợp hoặc sử dụng icon mặc định
                    string iconClass = categoryIcons.ContainsKey(category.CategoryName) 
                        ? categoryIcons[category.CategoryName] 
                        : categoryIcons["default"];
                    
                    <a asp-controller="Search" asp-action="SearchJob" asp-route-categoryId="@category.CategoryID" class="category-item">
                        <div class="category-icon">
                            @if (!string.IsNullOrEmpty(category.ImagePath))
                            {
                                <img src="@category.ImagePath" alt="@category.CategoryName" class="category-image" />
                            }
                            else
                            {
                                <i class="@iconClass"></i>
                            }
                        </div>
                        <div class="category-text">
                            @{
                                // Nếu tên category chứa & hoặc and, chia thành 2 dòng
                                if (category.CategoryName.Contains("&") || category.CategoryName.Contains(" and "))
                                {
                                    var parts = category.CategoryName.Replace(" and ", " & ").Split("&");
                                    <span>@parts[0].Trim()</span>
                                    <span>&@parts[1].Trim()</span>
                                }
                                else
                                {
                                    <span>@category.CategoryName</span>
                                }
                            }
                        </div>
                    </a>
                }
                
                // Nếu không có đủ 8 category, hiển thị các category mặc định để đủ 8 ô
                if (parentCategories.Count < 8)
                {
                    var defaultCategories = new[] {
                        new { Name = "Programming & Tech", Icon = "fas fa-code", Image = "/image/Icon/programming.png" },
                        new { Name = "Graphics & Design", Icon = "fas fa-palette", Image = "/image/Icon/design.png" },
                        new { Name = "Digital Marketing", Icon = "fas fa-chart-line", Image = "/image/Icon/marketing.png" },
                        new { Name = "Writing & Translation", Icon = "fas fa-pen-fancy", Image = "/image/Icon/writing.png" },
                        new { Name = "Video & Animation", Icon = "fas fa-video", Image = "/image/Icon/video.png" },
                        new { Name = "AI Services", Icon = "fas fa-robot", Image = "/image/Icon/ai.png" },
                        new { Name = "Music & Audio", Icon = "fas fa-music", Image = "/image/Icon/music.png" },
                        new { Name = "Business", Icon = "fas fa-briefcase", Image = "/image/Icon/business.png" }
                    };
                    
                    // Lọc ra các category mặc định chưa có trong danh sách từ database
                    var existingNames = parentCategories.Select(c => c.CategoryName.ToLower()).ToList();
                    var remainingCategories = defaultCategories
                        .Where(c => !existingNames.Contains(c.Name.ToLower()))
                        .Take(8 - parentCategories.Count);
                    
                    foreach (var category in remainingCategories)
                    {
                        <div class="category-item">
                            <div class="category-icon">
                                @if (!string.IsNullOrEmpty(category.Image))
                                {
                                    <img src="@category.Image" alt="@category.Name" class="category-image" />
                                }
                                else
                                {
                                    <i class="@category.Icon"></i>
                                }
                            </div>
                            <div class="category-text">
                                @{
                                    if (category.Name.Contains("&"))
                                    {
                                        var parts = category.Name.Split("&");
                                        <span>@parts[0].Trim()</span>
                                        <span>&@parts[1].Trim()</span>
                                    }
                                    else
                                    {
                                        <span>@category.Name</span>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
</section>

<!-- Popular Services Section -->
<section class="popular-services">
    <div class="container">
        <div class="section-header">
            <h2>Popular Business</h2>
            <a href="@Url.Action("SearchBusinesses", "Search")" class="view-all-btn">View all</a>
        </div>
        <div class="services-grid">
            @if (popularBusinesses != null && popularBusinesses.Any())
            {
                string[] cardColors = { "green", "pink", "orange", "teal", "purple", "yellow" };
                int colorIndex = 0;
                
                foreach (var business in popularBusinesses)
                {
                    var cardColor = cardColors[colorIndex % cardColors.Length];
                    colorIndex++;
                    
                    <div class="service-card @cardColor">
                        <div class="card-image">
                            @if (!string.IsNullOrEmpty(business.Avatar))
                            {
                                <img src="@business.Avatar" alt="@business.CompanyName" onerror="this.onerror=null; this.src='/image/default-avatar.png';" />
                            }
                            else
                            {
                                <img src="/image/default-avatar.png" alt="@business.CompanyName" />
                            }
                        </div>
                        <div class="card-content">
                            <h3>@business.CompanyName</h3>
                        </div>
                        <a href="@Url.Action("Profile", "User", new { id = business.Id })" class="card-link" title="Xem hồ sơ @business.CompanyName"></a>
                    </div>
                }
            }
            else
            {
                <p>No businesses found.</p>
            }
        </div>
    </div>
</section>

<!-- Enterprise Section -->
<section class="enterprise">
    <div class="container">
        <div class="enterprise-content">
            <div class="enterprise-text">
                <button class="btn btn-secondary">Enterprise Suite</button>
                @* <button  class="enterprise-tag"></button> *@
                <h2 class="enterprise-title">
                    This is how<br />
                    <span class="highlight">good companies</span><br />
                    find good company.
                </h2>
                <p class="enterprise-description">
                    Access the top 1% of talent on STJobs, and a full suite of hybrid
                    workforce management tools. This is how innovation works now.
                </p>
                <div class="enterprise-features">
                    <div class="feature">
                        <i class="fas fa-check"></i>
                        <span>Access expert talent to fill your skill gaps</span>
                    </div>
                    <div class="feature">
                        <i class="fas fa-check"></i>
                        <span>
                            Control your workflow: hire, classify and pay your
                            talent
                        </span>
                    </div>
                    <div class="feature">
                        <i class="fas fa-check"></i>
                        <span>Partner with Upwork for end-to-end support</span>
                    </div>
                </div>
                <button class="btn btn-secondary">Learn more</button>
            </div>
            <div class="enterprise-image">
                <img src="https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
                     alt="Professional working" />
                <div class="stat-card stat-card-1">
                    <i class="fas fa-users"></i>
                    <div>
                        <div class="stat-number">500+</div>
                        <div class="stat-label">Enterprise clients</div>
                    </div>
                </div>
                <div class="stat-card stat-card-2">
                    <i class="fas fa-briefcase"></i>
                    <div>
                        <div class="stat-number">10M+</div>
                        <div class="stat-label">Projects completed</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Find Talent Section -->
<section class="find-talent">
    <div class="container">
        <div class="find-talent-card">
            <button class="btn btn-secondary">For client</button>
            <div class="find-talent-content">
                <h2>Find talent<br />your way</h2>
                <p>
                    Work with the largest network of independent professionals and get
                    things done—from quick turnarounds to big transformations.
                </p>
            </div>
        </div>
    </div>
</section>
    </main>
<div id="footer"></div>

<script>
        // Slideshow functionality
        document.addEventListener('DOMContentLoaded', function() {
            const slides = document.querySelectorAll('.slide');
            const dots = document.querySelectorAll('.slideshow-dot');
            const prevButton = document.querySelector('.slideshow-prev');
            const nextButton = document.querySelector('.slideshow-next');
            const slideshowContainer = document.querySelector('.slideshow-container');
            const heroContainer = document.getElementById('hero-container');
            let current = 0;
            let timer;
            let touchStartX = 0;
            let touchEndX = 0;
            
            // Initialize slideshow
            function showSlide(index) {
                if (!slides || slides.length === 0) return;
                
                // Ensure index is within bounds
                if (index >= slides.length) index = 0;
                if (index < 0) index = slides.length - 1;
                
                // Remove active class from all slides and dots
                slides.forEach(slide => {
                    slide.classList.remove('active');
                });
                
                dots.forEach(dot => dot.classList.remove('active'));
                
                // Add active class to current slide and dot
                slides[index].classList.add('active');
                if (dots[index]) {
                    dots[index].classList.add('active');
                }
                
                // Update current index
                current = index;
                
                // Update hero container visibility based on slide type
                updateHeroContainerVisibility();
                
                console.log('Changed to slide', index);
            }
            
            // Next slide
            function nextSlide() {
                if (!slides || slides.length === 0) return;
                
                let next = (current + 1) % slides.length;
                showSlide(next);
            }
            
            // Previous slide
            function prevSlide() {
                if (!slides || slides.length === 0) return;
                
                let prev = current - 1;
                if (prev < 0) prev = slides.length - 1;
                showSlide(prev);
            }
            
            // Start timer for automatic slideshow
            function startTimer() {
                clearInterval(timer);
                timer = setInterval(nextSlide, 5000);
            }
            
            // Reset timer when user interacts with slideshow
            function resetTimer() {
                clearInterval(timer);
                startTimer();
            }
            
            // Touch support for mobile devices
            if (slideshowContainer) {
                slideshowContainer.addEventListener('touchstart', function(e) {
                    touchStartX = e.changedTouches[0].screenX;
                }, {passive: true});
                
                slideshowContainer.addEventListener('touchend', function(e) {
                    touchEndX = e.changedTouches[0].screenX;
                    handleSwipe();
                }, {passive: true});
            }
            
            function handleSwipe() {
                let swipeDistance = touchEndX - touchStartX;
                
                if (Math.abs(swipeDistance) > 50) {
                    if (swipeDistance > 0) {
                        prevSlide();
                    } else {
                        nextSlide();
                    }
                    resetTimer();
                }
            }
            
            // Event listeners
            if (prevButton) {
                prevButton.addEventListener('click', function() {
                    prevSlide();
                    resetTimer();
                });
            }
            
            if (nextButton) {
                nextButton.addEventListener('click', function() {
                    nextSlide();
                    resetTimer();
                });
            }
            
            if (dots && dots.length > 0) {
                dots.forEach(function(dot, index) {
                    dot.addEventListener('click', function() {
                        showSlide(index);
                        resetTimer();
                    });
                });
            }
            
            // Pause slideshow on hover
            if (slideshowContainer) {
                slideshowContainer.addEventListener('mouseenter', function() {
                    clearInterval(timer);
                });
                
                slideshowContainer.addEventListener('mouseleave', function() {
                    startTimer();
                });
            }
            
            // Initialize slideshow
            if (slides && slides.length > 0) {
                showSlide(0);
                startTimer();
                console.log('Slideshow initialized with', slides.length, 'slides');
            }

            // Show/hide hero-container based on slide type
            function updateHeroContainerVisibility() {
                const activeSlide = document.querySelector('.slide.active');
                if (activeSlide && heroContainer) {
                    const slideType = activeSlide.dataset.slideType;
                    if (slideType === 'default') {
                        // Show hero container for default images
                        heroContainer.style.display = 'flex';
                        heroContainer.style.opacity = '1';
                        heroContainer.style.visibility = 'visible';
                    } else {
                        // Hide hero container for advertisements
                        heroContainer.style.display = 'none';
                        heroContainer.style.opacity = '0';
                        heroContainer.style.visibility = 'hidden';
                    }
                }
            }

            // Initial call to set visibility
            updateHeroContainerVisibility();
        });
    </script>
</script>

<script>
    // Load header and footer if needed
    const headerEl = document.getElementById('header');
    const footerEl = document.getElementById('footer');
    
    if (headerEl) {
      fetch('header.html')
        .then(res => res.text())
        .then(data => headerEl.innerHTML = data)
        .catch(err => console.log('Error loading header:', err));
    }
    
    if (footerEl) {
      fetch('footer.html')
        .then(res => res.text())
        .then(data => footerEl.innerHTML = data)
        .catch(err => console.log('Error loading footer:', err));
    }
</script>
