@model StudentFreelance.Models.Category
@{
    ViewData["Title"] = "Chỉnh sửa danh mục";
    var isParent = ViewBag.IsParent as bool? ?? false;
    var isChild = ViewBag.IsChild as bool? ?? false;
}

<h2>@ViewData["Title"]</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(m => m.CategoryID)

    <div class="form-group">
        @Html.LabelFor(m => m.CategoryName)
        @Html.TextBoxFor(m => m.CategoryName, new
            {
                @class = "form-control",
                @readonly = isParent ? "readonly" : null
            })
        @Html.ValidationMessageFor(m => m.CategoryName, "", new { @class = "text-danger" })
    </div>

    
    bool isEditable = ViewBag.IsChild == true; // là skill thì cho sửa
    string categoryTypeValue = Model.CategoryType ?? "";


<div class="form-group">
    @Html.LabelFor(m => m.CategoryType)
    @Html.DropDownListFor(m => m.CategoryType,
        new SelectList(new[] {
            new { Value = "field", Text = "Field" },
            new { Value = "skill", Text = "Skill" }
        }, "Value", "Text", categoryTypeValue),
        "-- chọn loại --",
        new {
            @class = "form-control",
            id = "categoryTypeSelect",
            @disabled = !isEditable ? "disabled" : null
        })

    @if (!isEditable)
    {
        @Html.HiddenFor(m => m.CategoryType)
    }

    @Html.ValidationMessageFor(m => m.CategoryType, "", new { @class = "text-danger" })
</div>


    <div class="form-group" id="parentCategoryGroup">
        @Html.Label("ParentCategoryID", "Danh mục cha")
        @Html.DropDownList("ParentCategoryID", ViewData["ParentCategoryID"] as List<SelectListItem>, "-- choose field --", new
            {
                @class = "form-control",
                id = "parentSelect",
                @disabled = isParent || Model.CategoryType == "field" ? "disabled" : null
            })
        @Html.ValidationMessageFor(m => m.ParentCategoryID, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Description)
        @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
    </div>

    <button type="submit" class="btn btn-primary">Save change</button>
    <a asp-action="Index" class="btn btn-secondary">Back</a>
}

@section Scripts {
    <script>
        function toggleParentDropdown() {
            var type = document.getElementById("categoryTypeSelect").value;
            var parentGroup = document.getElementById("parentCategoryGroup");
            var parentSelect = document.getElementById("parentSelect");

            if (type === "field") {
                parentGroup.style.display = "none";
                parentSelect.value = "";
            } else {
                parentGroup.style.display = "block";
            }
        }

        document.getElementById("categoryTypeSelect")?.addEventListener("change", toggleParentDropdown);
        toggleParentDropdown();
    </script>
}
