@model IEnumerable<StudentFreelance.Models.Project>
@{
    ViewData["Title"] = "Kết quả tìm kiếm";
    
    var importanceLevels = ViewBag.ImportanceLevels as List<StudentFreelance.Models.Enums.ImportanceLevel> ?? new List<StudentFreelance.Models.Enums.ImportanceLevel>();
    var proficiencyLevels = ViewBag.ProficiencyLevels as List<StudentFreelance.Models.Enums.ProficiencyLevel> ?? new List<StudentFreelance.Models.Enums.ProficiencyLevel>();
    
    // Lấy các giá trị để hiển thị thông tin tìm kiếm
    var query = ViewBag.Query as string ?? string.Empty;
    var location = ViewBag.Location as string ?? string.Empty;
    var categoryId = ViewBag.CategoryId as int? ?? null;
    var skillIds = ViewBag.SkillIds as List<int> ?? new List<int>();
    var userId = ViewBag.UserId as int? ?? null;
    var provinceId = ViewBag.ProvinceId as int? ?? null;
    
    var categories = ViewBag.Categories as List<StudentFreelance.Models.Category> ?? new List<StudentFreelance.Models.Category>();
    var skills = ViewBag.Skills as List<StudentFreelance.Models.Skill> ?? new List<StudentFreelance.Models.Skill>();
    var businessUsers = ViewBag.BusinessUsers as List<StudentFreelance.Models.ApplicationUser> ?? new List<StudentFreelance.Models.ApplicationUser>();
    var provinces = ViewBag.Provinces as List<StudentFreelance.Models.Province> ?? new List<StudentFreelance.Models.Province>();
    
    var selectedCategory = categoryId.HasValue ? categories.FirstOrDefault(c => c.CategoryID == categoryId) : null;
    var selectedBusiness = userId.HasValue ? businessUsers.FirstOrDefault(u => u.Id == userId) : null;
    var selectedProvince = provinceId.HasValue ? provinces.FirstOrDefault(p => p.ProvinceID == provinceId) : null;
    
    var selectedSkills = skills.Where(s => skillIds.Contains(s.SkillID)).ToList();
    
    // Nhóm các danh mục theo loại
    var fieldCategories = categories.Where(c => c.CategoryType == "Field" && c.ParentCategoryID == null).ToList();
    var skillCategories = categories.Where(c => c.CategoryType == "Skill").ToList();
    
    // Nhóm kỹ năng theo danh mục
    var skillsByCategory = skills
        .GroupBy(s => s.CategoryID)
        .ToDictionary(g => g.Key, g => g.ToList());
}

<div class="container mt-4">
    <!-- Thanh tìm kiếm nâng cao -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <form asp-controller="Search" asp-action="SearchJob" method="get" id="advancedSearchForm">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" name="query" class="form-control border-start-0" 
                                placeholder="Vị trí tuyển dụng, tên công ty" value="@query">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-geo-alt"></i>
                            </span>
                            <select name="provinceId" class="form-select border-start-0" id="provinceSelect">
                                <option value="">Địa điểm</option>
                                @foreach (var province in provinces.OrderBy(p => p.Name))
                                {
                                    if (provinceId == province.ProvinceID)
                                    {
                                        <option value="@province.ProvinceID" selected>@province.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@province.ProvinceID">@province.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="bi bi-search"></i> Tìm kiếm
                        </button>
                    </div>
                </div>

                <div class="mb-3">
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-toggle="collapse" 
                            data-bs-target="#advancedSearch" aria-expanded="false">
                        <i class="bi bi-sliders"></i> Tìm kiếm nâng cao
                    </button>
                </div>

                <div class="collapse" id="advancedSearch">
                    <div class="card card-body border-0 bg-light">
                        <div class="row">
                            <!-- Tìm kiếm theo nhóm nghề -->
                            <div class="col-md-12 mb-3">
                                <h6 class="mb-2">Chọn Nhóm nghề, Nghề hoặc Chuyên môn</h6>
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" id="skillSearch" 
                                        placeholder="Nhập từ khóa tìm kiếm" aria-label="Tìm kiếm kỹ năng">
                                </div>
                                <div class="row">
                                    <div class="col-md-4" id="fieldCategoriesContainer">
                                        <div class="card h-100">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">NHÓM NGHỀ</h6>
                                            </div>
                                            <div class="card-body p-0 overflow-auto" style="max-height: 300px;">
                                                <ul class="list-group list-group-flush field-categories">
                                                    @foreach (var field in fieldCategories)
                                                    {
                                                        <li class="list-group-item d-flex align-items-center">
                                                            <div class="form-check">
                                                                <input class="form-check-input field-category" type="radio" 
                                                                    name="fieldCategory" value="@field.CategoryID" id="field_@field.CategoryID"
                                                                    data-field-id="@field.CategoryID">
                                                                <label class="form-check-label" for="field_@field.CategoryID">
                                                                    @field.CategoryName
                                                                </label>
                                                            </div>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4" id="subCategoriesContainer" style="display: none;">
                                        <div class="card h-100">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">NGHỀ</h6>
                                            </div>
                                            <div class="card-body p-0 overflow-auto" style="max-height: 300px;">
                                                <ul class="list-group list-group-flush sub-categories">
                                                    @foreach (var field in fieldCategories)
                                                    {
                                                        var subCategories = categories.Where(c => c.ParentCategoryID == field.CategoryID).ToList();
                                                        foreach (var subCategory in subCategories)
                                                        {
                                                            <li class="list-group-item d-flex align-items-center field-item field-@field.CategoryID" style="display: none;">
                                                                <div class="form-check">
                                                                    <input class="form-check-input sub-category" type="radio" 
                                                                        name="categoryId" value="@subCategory.CategoryID" id="category_@subCategory.CategoryID"
                                                                        data-parent-id="@field.CategoryID" 
                                                                        data-category-id="@subCategory.CategoryID"
                                                                        @if(categoryId == subCategory.CategoryID) { <text>checked</text> }>
                                                                    <label class="form-check-label" for="category_@subCategory.CategoryID">
                                                                        @subCategory.CategoryName
                                                                    </label>
                                                                </div>
                                                            </li>
                                                        }
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4" id="skillsContainer" style="display: none;">
                                        <div class="card h-100">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">VỊ TRÍ CHUYÊN MÔN</h6>
                                            </div>
                                            <div class="card-body p-0 overflow-auto" style="max-height: 300px;">
                                                <div class="p-2 skill-items">
                                                    @foreach (var skill in skills)
                                                    {
                                                        <div class="mb-2 skill-item category-@skill.CategoryID" style="display: none;">
                                                            <div class="form-check">
                                                                @if (skillIds.Contains(skill.SkillID))
                                                                {
                                                                    <input class="form-check-input skill" type="checkbox" 
                                                                        name="skillIds" value="@skill.SkillID" id="skill_@skill.SkillID"
                                                                        data-category-id="@skill.CategoryID" checked>
                                                                }
                                                                else
                                                                {
                                                                    <input class="form-check-input skill" type="checkbox" 
                                                                        name="skillIds" value="@skill.SkillID" id="skill_@skill.SkillID"
                                                                        data-category-id="@skill.CategoryID">
                                                                }
                                                                <label class="form-check-label" for="skill_@skill.SkillID">
                                                                    @skill.SkillName
                                                                </label>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-12 mt-3 d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-secondary" id="clearFilters">Bỏ chọn tất cả</button>
                                <button type="submit" class="btn btn-primary">Áp dụng</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Lưu provinceId hiện tại để tránh bị reset -->
                <input type="hidden" id="currentProvinceId" value="@provinceId" />
            </form>
        </div>
    </div>

    <h2>Kết quả tìm kiếm</h2>
    
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <p>Tìm thấy @Model.Count() dự án</p>
            @if (!string.IsNullOrEmpty(query) || !string.IsNullOrEmpty(location) || categoryId.HasValue || skillIds.Any() || userId.HasValue || provinceId.HasValue)
            {
                <p class="text-muted small">
                    Tiêu chí tìm kiếm: 
                    @if (!string.IsNullOrEmpty(query)) { <span class="badge bg-secondary me-1">Từ khóa: @query</span> }
                    @if (!string.IsNullOrEmpty(location)) { <span class="badge bg-secondary me-1">Địa điểm: @location</span> }
                    @if (selectedCategory != null) { <span class="badge bg-secondary me-1">Danh mục: @selectedCategory.CategoryName</span> }
                    @if (selectedSkills.Any()) 
                    { 
                        foreach (var skill in selectedSkills)
                        {
                            <span class="badge bg-secondary me-1">Kỹ năng: @skill.SkillName</span>
                        }
                    }
                    @if (selectedBusiness != null) { <span class="badge bg-secondary me-1">Công ty: @selectedBusiness.CompanyName</span> }
                    @if (selectedProvince != null) { <span class="badge bg-secondary me-1">Địa điểm: @selectedProvince.Name</span> }
                </p>
            }
        </div>
        <div class="btn-group">
            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                Sắp xếp
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                <li><a class="dropdown-item" href="#" onclick="sortProjects('newest')">Mới nhất</a></li>
                <li><a class="dropdown-item" href="#" onclick="sortProjects('budget-desc')">Ngân sách cao nhất</a></li>
                <li><a class="dropdown-item" href="#" onclick="sortProjects('budget-asc')">Ngân sách thấp nhất</a></li>
                <li><a class="dropdown-item" href="#" onclick="sortProjects('deadline')">Gần hết hạn</a></li>
            </ul>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info mt-3">
            Không tìm thấy dự án phù hợp với tiêu chí tìm kiếm.
        </div>
    }
    else
    {
        <div class="row mt-3" id="projects-container">
            @foreach (var project in Model)
            {
                <div class="col-md-6 col-lg-4 mb-4 project-card" 
                     data-created="@project.CreatedAt.Ticks" 
                     data-budget="@project.Budget" 
                     data-deadline="@project.Deadline.Ticks">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge bg-primary">@project.Budget.ToString("N0") VNĐ</span>
                            <span class="badge bg-@(project.Status.StatusName == "Đang tuyển" ? "success" : "secondary")">
                                @project.Status.StatusName
                            </span>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@project.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">
                                <i class="bi bi-folder"></i> @project.Category.CategoryName
                                <span class="ms-2"><i class="bi bi-clock"></i> @project.Type.TypeName</span>
                            </h6>
                            
                            @if (project.Address?.Province != null)
                            {
                                <p class="card-text mb-2">
                                    <i class="bi bi-geo-alt"></i> @project.Address.Province.Name
                                    @if (!string.IsNullOrEmpty(project.Address.DetailAddress))
                                    {
                                        <span class="text-muted"> - @project.Address.DetailAddress</span>
                                    }
                                </p>
                            }
                            else if (project.IsRemoteWork)
                            {
                                <p class="card-text mb-2">
                                    <i class="bi bi-laptop"></i> <span class="badge bg-info text-dark">Làm việc từ xa</span>
                                </p>
                            }
                            
                            <p class="card-text">
                                @(project.Description?.Length > 100 
                                    ? project.Description.Substring(0, 100) + "..." 
                                    : project.Description)
                            </p>
                            
                            @if (project.ProjectSkillsRequired.Any())
                            {
                                <div class="mb-2">
                                    <small class="text-muted">Kỹ năng yêu cầu:</small>
                                    <div>
                                        @foreach (var skill in project.ProjectSkillsRequired.Take(3))
                                        {
                                            <span class="badge rounded-pill bg-light text-dark me-1">
                                                @skill.Skill.SkillName
                                                @if (skill.ImportanceLevel != null)
                                                {
                                                    <small class="text-@(skill.ImportanceLevel.LevelName == "Bắt buộc" ? "danger" : "primary")">
                                                        (@skill.ImportanceLevel.LevelName)
                                                    </small>
                                                }
                                            </span>
                                        }
                                        @if (project.ProjectSkillsRequired.Count() > 3)
                                        {
                                            <span class="badge rounded-pill bg-light text-dark">+@(project.ProjectSkillsRequired.Count() - 3)</span>
                                        }
                                    </div>
                                </div>
                            }
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">Hạn nộp: @project.Deadline.ToString("dd/MM/yyyy")</small>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="bi bi-building"></i> @project.Business.CompanyName
                                </small>
                                <a href="#" class="btn btn-sm btn-outline-primary">Chi tiết</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function sortProjects(sortBy) {
            const container = document.getElementById('projects-container');
            const projects = Array.from(container.getElementsByClassName('project-card'));
            
            projects.sort((a, b) => {
                switch(sortBy) {
                    case 'newest':
                        return b.dataset.created - a.dataset.created;
                    case 'budget-desc':
                        return b.dataset.budget - a.dataset.budget;
                    case 'budget-asc':
                        return a.dataset.budget - b.dataset.budget;
                    case 'deadline':
                        return a.dataset.deadline - b.dataset.deadline;
                    default:
                        return 0;
                }
            });
            
            projects.forEach(project => container.appendChild(project));
        }
        
        // Xử lý tìm kiếm nâng cao
        $(document).ready(function() {
            // Tạo danh sách đơn giản hơn để tránh tham chiếu vòng tròn
            const categoriesData = [
                @foreach (var category in categories)
                {
                    <text>
                    {
                        categoryID: @category.CategoryID,
                        categoryName: "@Html.Raw(Json.Serialize(category.CategoryName))",
                        parentCategoryID: @(category.ParentCategoryID.HasValue ? category.ParentCategoryID.Value.ToString() : "null"),
                        categoryType: "@category.CategoryType"
                    },
                    </text>
                }
            ];
            
            const skillsData = [
                @foreach (var skill in skills)
                {
                    <text>
                    {
                        skillID: @skill.SkillID,
                        skillName: "@Html.Raw(Json.Serialize(skill.SkillName))",
                        categoryID: @skill.CategoryID
                    },
                    </text>
                }
            ];
            
            // Lọc và hiển thị danh mục con khi chọn danh mục chính
            $('.field-category').on('change', function() {
                const fieldId = $(this).data('field-id');
                const isChecked = $(this).prop('checked');
                
                if (isChecked) {
                    // Hiển thị container danh mục con
                    $('#subCategoriesContainer').show();
                    
                    // Ẩn tất cả các danh mục con
                    $('.field-item').hide();
                    
                    // Hiển thị danh mục con thuộc danh mục chính đã chọn
                    $(`.field-${fieldId}`).show();
                    
                    // Ẩn container kỹ năng và bỏ chọn tất cả các kỹ năng
                    $('#skillsContainer').hide();
                    $('.skill').prop('checked', false);
                    $('.skill-item').hide();
                    
                    // Bỏ chọn tất cả các danh mục con
                    $('.sub-category').prop('checked', false);
                }
            });
            
            // Xử lý khi chọn danh mục con
            $('.sub-category').on('change', function() {
                const categoryId = $(this).data('category-id');
                const isChecked = $(this).prop('checked');
                
                if (isChecked) {
                    // Hiển thị container kỹ năng
                    $('#skillsContainer').show();
                    
                    // Ẩn tất cả các kỹ năng
                    $('.skill-item').hide();
                    
                    // Hiển thị kỹ năng thuộc danh mục con đã chọn
                    $(`.category-${categoryId}`).show();
                }
            });
            
            // Xử lý tìm kiếm kỹ năng
            $('#skillSearch').on('input', function() {
                const searchTerm = $(this).val().toLowerCase();
                
                if (searchTerm) {
                    // Khi có từ khóa tìm kiếm, hiển thị tất cả các container
                    $('#fieldCategoriesContainer').show();
                    $('#subCategoriesContainer').show();
                    $('#skillsContainer').show();
                    
                    // Tìm kiếm trong danh mục chính
                    $('.field-categories .list-group-item').each(function() {
                        const text = $(this).text().toLowerCase().trim();
                        $(this).toggle(text.includes(searchTerm));
                    });
                    
                    // Tìm kiếm trong danh mục con
                    $('.sub-categories .list-group-item').each(function() {
                        const text = $(this).text().toLowerCase().trim();
                        $(this).toggle(text.includes(searchTerm));
                    });
                    
                    // Tìm kiếm trong kỹ năng
                    $('.skill-items .skill-item').each(function() {
                        const text = $(this).text().toLowerCase().trim();
                        $(this).toggle(text.includes(searchTerm));
                    });
                } else {
                    // Khi không có từ khóa tìm kiếm, trở về trạng thái hiển thị theo lựa chọn
                    const hasSelectedField = $('.field-category:checked').length > 0;
                    const hasSelectedSubCategory = $('.sub-category:checked').length > 0;
                    
                    // Luôn hiển thị danh mục chính
                    $('#fieldCategoriesContainer').show();
                    
                    // Hiển thị danh mục con nếu đã chọn danh mục chính
                    $('#subCategoriesContainer').toggle(hasSelectedField);
                    
                    // Hiển thị kỹ năng nếu đã chọn danh mục con
                    $('#skillsContainer').toggle(hasSelectedSubCategory);
                    
                    if (hasSelectedField) {
                        // Nếu đã chọn danh mục chính, chỉ hiển thị danh mục con thuộc danh mục chính đó
                        const fieldId = $('.field-category:checked').data('field-id');
                        $('.field-item').hide();
                        $(`.field-${fieldId}`).show();
                    }
                    
                    if (hasSelectedSubCategory) {
                        // Nếu đã chọn danh mục con, chỉ hiển thị kỹ năng thuộc danh mục con đó
                        const categoryId = $('.sub-category:checked').data('category-id');
                        $('.skill-item').hide();
                        $(`.category-${categoryId}`).show();
                    }
                }
            });
            
            // Xử lý nút xóa bộ lọc
            $('#clearFilters').on('click', function() {
                // Xóa tất cả các checkbox đã chọn
                $('input[type="checkbox"], input[type="radio"]').prop('checked', false);
                
                // Ẩn container danh mục con và kỹ năng
                $('#subCategoriesContainer').hide();
                $('#skillsContainer').hide();
                
                // Xóa giá trị tìm kiếm
                $('#skillSearch').val('');
            });
            
            // Khởi tạo hiển thị ban đầu nếu có danh mục đã chọn
            if (@(categoryId.HasValue ? "true" : "false")) {
                // Tìm danh mục đã chọn
                const selectedCategory = categoriesData.find(c => c.categoryID == @(categoryId ?? 0));
                if (selectedCategory && selectedCategory.parentCategoryID) {
                    // Nếu là danh mục con, chọn danh mục cha trước
                    $(`#field_${selectedCategory.parentCategoryID}`).prop('checked', true).trigger('change');
                    
                    // Sau đó chọn danh mục con
                    setTimeout(() => {
                        $(`#category_${selectedCategory.categoryID}`).prop('checked', true).trigger('change');
                    }, 100);
                }
            }
            
            // Đảm bảo giá trị provinceId không bị reset khi submit form
            $('#advancedSearchForm').on('submit', function(e) {
                // Lấy giá trị provinceId hiện tại từ hidden field
                const currentProvinceId = $('#currentProvinceId').val();
                
                // Nếu không có giá trị provinceId mới được chọn trong form và có giá trị cũ, sử dụng giá trị cũ
                if ($('#provinceSelect').val() === "" && currentProvinceId) {
                    $('#provinceSelect').val(currentProvinceId);
                }
            });
        });
    </script>
} 