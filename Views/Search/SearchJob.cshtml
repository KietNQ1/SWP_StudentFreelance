
@model IEnumerable<StudentFreelance.Models.Project>

@{
    ViewData["Title"] = "T√¨m ki·∫øm d·ª± √°n";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    var topProjects = ViewBag.TopProjects as List<StudentFreelance.Models.Project>;
    var importanceLevels = ViewBag.ImportanceLevels as List<StudentFreelance.Models.Enums.ImportanceLevel> ?? new List<StudentFreelance.Models.Enums.ImportanceLevel>();
    var proficiencyLevels = ViewBag.ProficiencyLevels as List<StudentFreelance.Models.Enums.ProficiencyLevel> ?? new List<StudentFreelance.Models.Enums.ProficiencyLevel>();
    
    // L·∫•y c√°c gi√° tr·ªã ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin t√¨m ki·∫øm
    var query = ViewBag.Query as string ?? string.Empty;
    var location = ViewBag.Location as string ?? string.Empty;
    var categoryId = ViewBag.CategoryId as int? ?? null;
    var skillIds = ViewBag.SkillIds as List<int> ?? new List<int>();
    var userId = ViewBag.UserId as int?;
    var provinceCode = ViewBag.ProvinceCode as string;
    
    var categories = ViewBag.Categories as List<StudentFreelance.Models.Category>;
    var skills = ViewBag.Skills as List<StudentFreelance.Models.Skill>;
    var businessUsers = ViewBag.BusinessUsers as List<StudentFreelance.Models.ApplicationUser>;
    var provinces = ViewBag.Provinces as List<dynamic>;
    
    var selectedCategory = categories?.FirstOrDefault(c => c.CategoryID == categoryId);
    var selectedSkills = skills?.Where(s => skillIds.Contains(s.SkillID)).ToList() ?? new List<StudentFreelance.Models.Skill>();
    var selectedBusiness = businessUsers?.FirstOrDefault(b => b.Id == userId);
    var selectedProvinceName = string.Empty;
    
    if (!string.IsNullOrEmpty(provinceCode) && provinces != null)
    {
        var selectedProvince = provinces.FirstOrDefault(p => p.ID.ToString() == provinceCode);
        if (selectedProvince != null)
        {
            selectedProvinceName = selectedProvince.Name;
        }
    }
}

@section Styles {
    <link rel="stylesheet" href="~/css/search/searchJob.css" asp-append-version="true" />
}

<div class="container my-5 search-job-container">
    <div class="topbar">
        <h1><i class="bi bi-search"></i> T√¨m ki·∫øm d·ª± √°n</h1>
        
        <form asp-controller="Search" asp-action="SearchJob" method="get" class="filter-row">
            <div class="filter-group">
                <input type="text" name="query" value="@query" placeholder="üîç T√¨m ki·∫øm d·ª± √°n..." />
            </div>
            
            <div class="filter-group">
                <div class="category-skills-dropdown">
                    <button type="button" class="custom-select w-100 text-start d-flex justify-content-between align-items-center" id="dropdownCategorySkillsBtn">
                        <span id="selectedCategorySkill" class="text-truncate pe-2">
                            @if (selectedSkills.Any())
                            {
                                if (selectedSkills.Count == 1)
                                {
                                    <span>@selectedSkills.First().SkillName</span>
                                }
                                else
                                {
                                    <span>@selectedSkills.Count v·ªã tr√≠ chuy√™n m√¥n</span>
                                }
                            }
                            else if (categoryId.HasValue)
                            {
                                var categorySelected = categories.FirstOrDefault(c => c.CategoryID == categoryId);
                                if (categorySelected != null)
                                {
                                    <span>@categorySelected.CategoryName</span>
                                }
                                else
                                {
                                    <span>üë®‚Äçüíº Ch·ªçn Nh√≥m ngh·ªÅ, Ngh·ªÅ ho·∫∑c Chuy√™n m√¥n</span>
                                }
                            }
                            else
                            {
                                <span>üë®‚Äçüíº Ch·ªçn Nh√≥m ngh·ªÅ, Ngh·ªÅ ho·∫∑c Chuy√™n m√¥n</span>
                            }
                        </span>
                        <i class="bi bi-chevron-down"></i>
                    </button>
                    <div class="category-skills-container" id="categorySkillsContainer">
                        <div class="card">
                            <div class="card-body p-0">
                                <div class="container-fluid">
                                    <div class="row">
                                        <!-- C·ªôt danh m·ª•c -->
                                        <div class="col-md-4 p-0 category-list">
                                            <div class="list-group list-group-flush">
                                                <div class="list-group-item fw-bold filter-header">NH√ìM NGH·ªÄ</div>
                                                @foreach (var category in categories.Where(c => c.CategoryType == "Field" && c.ParentCategoryID == null))
                                                {
                                                    string activeClass = categoryId == category.CategoryID ? "active" : "";
                                                    <a href="#" class="list-group-item list-group-item-action category-item @activeClass" 
                                                       data-category-id="@category.CategoryID">
                                                        @category.CategoryName
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                        
                                        <!-- C·ªôt danh m·ª•c con -->
                                        <div class="col-md-4 p-0 subcategory-list">
                                            <div class="list-group list-group-flush">
                                                <div class="list-group-item fw-bold filter-header">NGH·ªÄ</div>
                                                @foreach (var mainCategory in categories.Where(c => c.CategoryType == "Field" && c.ParentCategoryID == null))
                                                {
                                                    <div class="subcategory-group" id="subcategory-@mainCategory.CategoryID" style="display: @(categoryId == mainCategory.CategoryID ? "block" : "none");">
                                                        @{
                                                            var categorySubCategories = categories.Where(sc => sc.ParentCategoryID == mainCategory.CategoryID).ToList();
                                                            if (categorySubCategories.Any())
                                                            {
                                                                foreach (var subCategory in categorySubCategories)
                                                                {
                                                                    string activeClass = categoryId == subCategory.CategoryID ? "active" : "";
                                                                    <a href="#" class="list-group-item list-group-item-action subcategory-item @activeClass" 
                                                                       data-subcategory-id="@subCategory.CategoryID" 
                                                                       data-parent-id="@mainCategory.CategoryID">
                                                                        @subCategory.CategoryName
                                                                    </a>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <div class="list-group-item">Kh√¥ng c√≥ ngh·ªÅ con</div>
                                                            }
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        
                                        <!-- C·ªôt k·ªπ nƒÉng -->
                                        <div class="col-md-4 p-0 skill-list">
                                            <div class="list-group list-group-flush">
                                                <div class="list-group-item fw-bold filter-header">V·ªä TR√ç CHUY√äN M√îN</div>
                                                <div class="selected-skills-container @(selectedSkills.Any() ? "" : "d-none")">
                                                    <div class="list-group-item bg-light text-dark">
                                                        <small>ƒê√£ ch·ªçn (<span id="selectedSkillsCount">@selectedSkills.Count</span>)</small>
                                                    </div>
                                                    <div id="selectedSkillsList" class="selected-skills-list">
                                                        @foreach (var skill in selectedSkills)
                                                        {
                                                            <a href="#" class="list-group-item list-group-item-action skill-item selected" 
                                                               data-skill-id="@skill.SkillID" 
                                                               data-category-id="@skill.CategoryID">
                                                                <div class="d-flex justify-content-between align-items-center">
                                                                    <span>@skill.SkillName</span>
                                                                    <i class="bi bi-check-lg text-success"></i>
                                                                </div>
                                                            </a>
                                                        }
                                                    </div>
                                                </div>
                                                @foreach (var category in categories)
                                                {
                                                    <div class="skill-group" id="skills-@category.CategoryID" style="display: none;">
                                                        @if (skills.Any(s => s.CategoryID == category.CategoryID))
                                                        {
                                                            var orderedSkills = skills.Where(s => s.CategoryID == category.CategoryID).OrderBy(s => s.SkillName).ToList();
                                                            foreach (var skill in orderedSkills)
                                                            {
                                                                string selectedClass = skillIds.Contains(skill.SkillID) ? "selected" : "";
                                                                <a href="#" class="list-group-item list-group-item-action skill-item @selectedClass" 
                                                                   data-skill-id="@skill.SkillID" 
                                                                   data-category-id="@category.CategoryID"
                                                                   data-skill-name="@skill.SkillName">
                                                                    <div class="d-flex justify-content-between align-items-center">
                                                                        <span>@skill.SkillName</span>
                                                                        @if (skillIds.Contains(skill.SkillID))
                                                                        {
                                                                            <i class="bi bi-check-lg text-success"></i>
                                                                        }
                                                                    </div>
                                                                </a>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <div class="list-group-item">Kh√¥ng c√≥ k·ªπ nƒÉng</div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer bg-light p-2 d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-secondary" id="clearCategorySkill">H·ªßy</button>
                                <button type="button" class="btn btn-primary" id="applyCategorySkill">Ch·ªçn</button>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" name="categoryId" id="hiddenCategoryId" value="@categoryId">
                <div id="skillIdsContainer">
                    @foreach (var skillId in skillIds)
                    {
                        <input type="hidden" name="skillIds" value="@skillId" />
                    }
                </div>
            </div>
            
            <div class="filter-group">
                <select class="custom-select" name="userId" id="companySelect">
                    <option value="">üè¢ Ch·ªçn c√¥ng ty</option>
                    @foreach (var business in businessUsers.OrderBy(b => b.CompanyName))
                    {
                        if (userId == business.Id)
                        {
                            <option value="@business.Id" selected>@business.CompanyName</option>
                        }
                        else
                        {
                            <option value="@business.Id">@business.CompanyName</option>
                        }
                    }
                </select>
            </div>
            
            <div class="filter-group">
                <select class="custom-select" name="provinceCode" id="provinceSelect">
                    <option value="">üìç Ch·ªçn t·ªânh/th√†nh</option>
                    @{
                        var orderedProvinces = ViewBag.Provinces as IEnumerable<dynamic>;
                        if (orderedProvinces != null)
                        {
                            foreach (var province in orderedProvinces)
                            {
                                if (ViewBag.ProvinceCode != null && ViewBag.ProvinceCode == province.ID)
                                {
                                    <option value="@province.ID" selected>@province.Name</option>
                                }
                                else
                                {
                                    <option value="@province.ID">@province.Name</option>
                                }
                            }
                        }
                    }
                </select>
            </div>
            
            <button type="submit" class="filter-btn" id="searchBtn">
                <i class="bi bi-filter"></i> T√¨m ki·∫øm
            </button>
            
            <a href="@Url.Action("SearchJob", "Search")" class="reset-btn">
                <i class="bi bi-x-circle"></i> X√≥a b·ªô l·ªçc
            </a>
        </form>
    </div>

    <!-- Top Projects Section -->
    <section class="top-projects mt-4">
        <div class="section-header">
            <h2>D·ª± √°n ƒë·ªÅ xu·∫•t</h2>
            <a asp-controller="Search" asp-action="SearchJob" class="view-all-btn">Xem t·∫•t c·∫£</a>
        </div>

        <div class="projects-grid">
            @foreach (var project in topProjects)
            {
                <a asp-controller="Project" asp-action="Details" asp-route-id="@project.ProjectID" class="text-decoration-none text-dark">
                    <div class="project-card">
                        <div class="project-image">
                            <img src="~/image/project-default.jpg" alt="@project.Business?.FullName" />
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">@project.Title</h3>
                            <p class="company-name">@project.Business?.FullName</p>
                            <div class="project-meta">
                                <span class="salary">@($"{project.Budget:N0} ƒë")</span>
                                <span class="location">
                                    @(project.IsRemoteWork ? "Remote" : project.Address?.ProvinceName ?? "Unidentified location")
                                </span>
                            </div>
                            <div class="project-status hot">Hot</div>
                        </div>
                    </div>
                </a>
            }
        </div>
    </section>
    
    <div class="results-container mt-5">
        <div class="results-header">
            <h2 class="results-heading">K·∫øt qu·∫£ t√¨m ki·∫øm</h2>
            
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <p class="results-count">T√¨m th·∫•y @Model.Count() d·ª± √°n</p>
                    @if (!string.IsNullOrEmpty(query) || !string.IsNullOrEmpty(location) || categoryId.HasValue || skillIds.Any() || userId.HasValue || !string.IsNullOrEmpty(provinceCode))
                    {
                        <div class="search-criteria">
                            @if (!string.IsNullOrEmpty(query)) { <span class="criteria-tag">T·ª´ kh√≥a: @query</span> }
                            @if (!string.IsNullOrEmpty(location)) { <span class="criteria-tag">ƒê·ªãa ƒëi·ªÉm: @location</span> }
                            @if (selectedCategory != null) { <span class="criteria-tag">Danh m·ª•c: @selectedCategory.CategoryName</span> }
                            @if (selectedSkills.Any()) 
                            { 
                                foreach (var skill in selectedSkills)
                                {
                                    <span class="criteria-tag">K·ªπ nƒÉng: @skill.SkillName</span>
                                }
                            }
                            @if (selectedBusiness != null) { <span class="criteria-tag">C√¥ng ty: @selectedBusiness.CompanyName</span> }
                            @if (!string.IsNullOrEmpty(selectedProvinceName)) { <span class="criteria-tag">ƒê·ªãa ƒëi·ªÉm: @selectedProvinceName</span> }
                        </div>
                    }
                </div>
                <div class="btn-group">
                    <button type="button" class="sort-btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-sort-down"></i> S·∫Øp x·∫øp
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#" onclick="sortProjects('newest')">M·ªõi nh·∫•t</a></li>
                        <li><a class="dropdown-item" href="#" onclick="sortProjects('budget-desc')">Ng√¢n s√°ch cao nh·∫•t</a></li>
                        <li><a class="dropdown-item" href="#" onclick="sortProjects('budget-asc')">Ng√¢n s√°ch th·∫•p nh·∫•t</a></li>
                        <li><a class="dropdown-item" href="#" onclick="sortProjects('deadline')">G·∫ßn h·∫øt h·∫°n</a></li>
                    </ul>
                </div>
            </div>
        </div>

        @if (!Model.Any())
        {
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Kh√¥ng t√¨m th·∫•y d·ª± √°n ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm.
            </div>
        }
        else
        {
            <div class="job-list" id="projects-container">
                @foreach (var project in Model)
                {
                    <div class="card mb-4 project-card" 
                         data-created="@project.CreatedAt.Ticks" 
                         data-budget="@project.Budget" 
                         data-deadline="@project.Deadline.Ticks">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-7">
                                    <div class="d-flex justify-content-between mb-2">
                                        <h5 class="card-title mb-0">@project.Title</h5>
                                        <div>
                                            <span class="badge budget-badge me-1">@project.Budget.ToString("N0") VNƒê</span>
                                            <span class="badge status-badge @(project.Status.StatusName == "ƒêang tuy·ªÉn" ? "active-status" : "")">
                                                @project.Status.StatusName
                                            </span>
                                        </div>
                                    </div>
                                    <h6 class="card-subtitle mb-2 text-muted">
                                        <i class="bi bi-folder"></i> @project.Category.CategoryName
                                        <span class="ms-2"><i class="bi bi-clock"></i> @project.Type.TypeName</span>
                                    </h6>
                                    
                                    <p class="card-text">
                                        @(project.Description?.Length > 100 
                                            ? project.Description.Substring(0, 100) + "..." 
                                            : project.Description)
                                    </p>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        @if (project.Address != null && !string.IsNullOrEmpty(project.Address.ProvinceCode))
                                        {
                                            <p class="mb-2">
                                                <i class="bi bi-geo-alt-fill me-2"></i>
                                                @if (!string.IsNullOrEmpty(project.Address.DetailAddress))
                                                {
                                                    @(project.Address.DetailAddress)<text>, </text>
                                                }
                                                @if (!string.IsNullOrEmpty(project.Address.WardName))
                                                {
                                                    @(project.Address.WardName)<text>, </text>
                                                }
                                                @if (!string.IsNullOrEmpty(project.Address.DistrictName))
                                                {
                                                    @(project.Address.DistrictName)<text>, </text>
                                                }
                                                @if (!string.IsNullOrEmpty(project.Address.ProvinceName))
                                                {
                                                    @(project.Address.ProvinceName)
                                                }
                                            </p>
                                        }
                                        else if (project.IsRemoteWork)
                                        {
                                            <p class="mb-2">
                                                <i class="bi bi-laptop me-2"></i> <span class="remote-badge">L√†m vi·ªác t·ª´ xa</span>
                                            </p>
                                        }
                                    </div>
                                    
                                    <div class="mb-2">
                                        <p class="mb-1"><small class="text-muted">K·ªπ nƒÉng y√™u c·∫ßu:</small></p>
                                        <div class="skills-container">
                                            @if (project.ProjectSkillsRequired.Any())
                                            {
                                                foreach (var skill in project.ProjectSkillsRequired.Take(3))
                                                {
                                                    <span class="skill-tag">
                                                        @skill.Skill.SkillName
                                                        @if (skill.ImportanceLevel != null)
                                                        {
                                                            <small class="importance-level @(skill.ImportanceLevel.LevelName == "B·∫Øt bu·ªôc" ? "required" : "")">
                                                                (@skill.ImportanceLevel.LevelName)
                                                            </small>
                                                        }
                                                    </span>
                                                }
                                                if (project.ProjectSkillsRequired.Count() > 3)
                                                {
                                                    <span class="skill-tag more-skills">+@(project.ProjectSkillsRequired.Count() - 3)</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">Kh√¥ng c√≥ k·ªπ nƒÉng y√™u c·∫ßu</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="col-md-2">
                                    <div class="d-flex flex-column align-items-end">
                                        <p class="mb-2">
                                            <small class="deadline-text">H·∫°n n·ªôp: @project.Deadline.ToString("dd/MM/yyyy")</small>
                                        </p>
                                        <p class="mb-2">
                                            <small class="company-text">
                                                <i class="bi bi-building me-1"></i> @project.Business.CompanyName
                                            </small>
                                        </p>
                                        <a href="@Url.Action("Details", "Project", new { id = project.ProjectID })" class="btn btn-view-profile">Chi ti·∫øt</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            @if (ViewBag.TotalPages != null && ViewBag.CurrentPage != null)
            {
                var paginationModel = new StudentFreelance.ViewModels.PaginationViewModel
                {
                    TotalPages = (int)ViewBag.TotalPages,
                    CurrentPage = (int)ViewBag.CurrentPage,
                    TotalRecords = (int)ViewBag.TotalRecords,
                    ActionName = "SearchJob",
                    ControllerName = "Search",
                    ItemName = "d·ª± √°n",
                    RouteValues = new Dictionary<string, string>
                    {
                        ["query"] = ViewBag.Query?.ToString() ?? string.Empty,
                        ["categoryId"] = ViewBag.CategoryId?.ToString() ?? string.Empty,
                        ["skillIds"] = ViewBag.SkillIds?.ToString() ?? string.Empty,
                        ["userId"] = ViewBag.UserId?.ToString() ?? string.Empty,
                        ["provinceCode"] = ViewBag.ProvinceCode?.ToString() ?? string.Empty
                    }
                };
                
                <partial name="_Pagination" model="paginationModel" />
            }
        }
    </div>
</div>



@section Scripts {
    <script>
        function sortProjects(sortBy) {
            const container = document.getElementById('projects-container');
            const projects = Array.from(container.getElementsByClassName('project-card'));
            
            projects.sort((a, b) => {
                switch(sortBy) {
                    case 'newest':
                        return b.dataset.created - a.dataset.created;
                    case 'budget-desc':
                        return b.dataset.budget - a.dataset.budget;
                    case 'budget-asc':
                        return a.dataset.budget - b.dataset.budget;
                    case 'deadline':
                        return a.dataset.deadline - b.dataset.deadline;
                    default:
                        return 0;
                }
            });
            
            projects.forEach(project => container.appendChild(project));
        }
        
        $(document).ready(function() {
            // H·ªßy b·ªè t·∫•t c·∫£ c√°c event handlers ƒë√£ g·∫Øn v√†o tr∆∞·ªõc ƒë√≥
            $('#companySelect').off();
            $('#provinceSelect').off();
            
            // Select2 initialization for company and province dropdowns
            $('#companySelect').select2({
                placeholder: "üè¢ Ch·ªçn c√¥ng ty",
                allowClear: true,
                dropdownCssClass: 'company-dropdown',
                width: '100%'
            }).on('select2:open', function() {
                // Ensure the dropdown shows correctly
                setTimeout(function() {
                    $('.company-dropdown').parent().css('z-index', '10000');
                }, 0);
            });
            
            $('#provinceSelect').select2({
                placeholder: "üìç Ch·ªçn t·ªânh/th√†nh",
                allowClear: true,
                dropdownCssClass: 'province-dropdown',
                width: '100%',
                language: {
                    noResults: function() {
                        return "Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë";
                    }
                }
            }).on('select2:open', function() {
                // Ensure the dropdown shows correctly
                setTimeout(function() {
                    $('.province-dropdown').parent().css('z-index', '10000');
                }, 0);
            });
            
            // Ensure dropdowns are visible when scrolling
            $(window).on('scroll resize', function() {
                var openDropdown = $(".select2-container--open");
                if (openDropdown.length) {
                    openDropdown.css({
                        'z-index': '10000',
                        'position': 'absolute'
                    });
                }
            });
            
            // S·ª≠a l·ªói click b·ªã double
            $('span.select2').on('click', function(e) {
                // NgƒÉn s·ª± ki·ªán click lan truy·ªÅn ƒë·∫øn c√°c ph·∫ßn t·ª≠ cha
                e.stopPropagation();
            });
            
            // ƒê·∫£m b·∫£o c√°c dropdowns kh·ªüi t·∫°o ƒë√∫ng
            setTimeout(function() {
                $('#companySelect').trigger('select2:close');
                $('#provinceSelect').trigger('select2:close');
            }, 100);
            
            // ƒê·∫£m b·∫£o dropdown category-skills hi·ªÉn th·ªã ƒë√∫ng
            $('#dropdownCategorySkillsBtn').on('click', function() {
                // ƒê·∫∑t z-index cao cho container
                $('#categorySkillsContainer').css('z-index', '10000');
                
                // Di chuy·ªÉn dropdown ra ngo√†i DOM flow ƒë·ªÉ kh√¥ng b·ªã che khu·∫•t
                if (!$('#categorySkillsContainer').hasClass('moved-to-body')) {
                    const container = $('#categorySkillsContainer');
                    const dropdownBtn = $('#dropdownCategorySkillsBtn');
                    const btnPosition = dropdownBtn.offset();
                    const btnWidth = dropdownBtn.outerWidth();
                    const btnHeight = dropdownBtn.outerHeight();
                    const containerWidth = container.outerWidth();
                    
                    // T√≠nh to√°n v·ªã tr√≠ ch√≠nh x√°c d·ª±a tr√™n n√∫t dropdown
                    const left = Math.max(10, btnPosition.left);
                    const top = btnPosition.top + btnHeight + 5;
                    
                    // ƒê·∫£m b·∫£o dropdown kh√¥ng v∆∞·ª£t qu√° m√†n h√¨nh b√™n ph·∫£i
                    const windowWidth = $(window).width();
                    const rightEdge = left + containerWidth;
                    const adjustedLeft = rightEdge > windowWidth ? Math.max(10, windowWidth - containerWidth - 10) : left;
                    
                    // L∆∞u v·ªã tr√≠ ban ƒë·∫ßu
                    container.data('original-parent', container.parent());
                    
                    // Di chuy·ªÉn ra body v·ªõi v·ªã tr√≠ ch√≠nh x√°c
                    container.appendTo('body')
                        .addClass('moved-to-body')
                        .css({
                            'position': 'absolute',
                            'top': top + 'px',
                            'left': adjustedLeft + 'px',
                            'width': Math.min(containerWidth, windowWidth - 20) + 'px',
                            'z-index': '10000',
                            'max-height': ($(window).height() - top - 20) + 'px',
                            'overflow-y': 'auto'
                        });
                }
                
                // ƒê·∫£m b·∫£o dropdown hi·ªÉn th·ªã tr√™n c√πng
                setTimeout(function() {
                    if ($('#categorySkillsContainer').hasClass('show')) {
                        $('#categorySkillsContainer').css({
                            'z-index': '10000',
                            'position': 'absolute'
                        });
                    }
                }, 10);
            });

            // C·∫≠p nh·∫≠t v·ªã tr√≠ dropdown khi c·ª≠a s·ªï thay ƒë·ªïi k√≠ch th∆∞·ªõc
            $(window).on('resize scroll', function() {
                if ($('#categorySkillsContainer').hasClass('moved-to-body') && $('#categorySkillsContainer').hasClass('show')) {
                    const container = $('#categorySkillsContainer');
                    const dropdownBtn = $('#dropdownCategorySkillsBtn');
                    
                    if (dropdownBtn.length && container.length) {
                        const btnPosition = dropdownBtn.offset();
                        const btnHeight = dropdownBtn.outerHeight();
                        const containerWidth = container.outerWidth();
                        
                        // T√≠nh to√°n v·ªã tr√≠ m·ªõi
                        const left = Math.max(10, btnPosition.left);
                        const top = btnPosition.top + btnHeight + 5;
                        
                        // ƒê·∫£m b·∫£o dropdown kh√¥ng v∆∞·ª£t qu√° m√†n h√¨nh b√™n ph·∫£i
                        const windowWidth = $(window).width();
                        const rightEdge = left + containerWidth;
                        const adjustedLeft = rightEdge > windowWidth ? Math.max(10, windowWidth - containerWidth - 10) : left;
                        
                        // C·∫≠p nh·∫≠t v·ªã tr√≠
                        container.css({
                            'top': top + 'px',
                            'left': adjustedLeft + 'px',
                            'width': Math.min(containerWidth, windowWidth - 20) + 'px',
                            'max-height': ($(window).height() - top - 20) + 'px'
                        });
                    }
                }
            });
        });
        
        document.addEventListener('DOMContentLoaded', function() {
            // C√°c ph·∫ßn t·ª≠ DOM
            const dropdownBtn = document.getElementById('dropdownCategorySkillsBtn');
            const container = document.getElementById('categorySkillsContainer');
            const categoryItems = document.querySelectorAll('.category-item');
            const subcategoryItems = document.querySelectorAll('.subcategory-item');
            const skillItems = document.querySelectorAll('.skill-item');
            const clearBtn = document.getElementById('clearCategorySkill');
            const applyBtn = document.getElementById('applyCategorySkill');
            const searchBtn = document.getElementById('searchBtn');
            const selectedSkillsContainer = document.querySelector('.selected-skills-container');
            const selectedSkillsList = document.getElementById('selectedSkillsList');
            const selectedSkillsCount = document.getElementById('selectedSkillsCount');
            const skillIdsContainer = document.getElementById('skillIdsContainer');
            
            let selectedCategoryId = document.getElementById('hiddenCategoryId').value || null;
            let selectedSkillIds = Array.from(document.querySelectorAll('input[name="skillIds"]')).map(input => input.value);
            let isDropdownOpen = false;
            
            // H√†m hi·ªÉn th·ªã/·∫©n dropdown
            function toggleDropdown() {
                isDropdownOpen = !isDropdownOpen;
                if (isDropdownOpen) {
                    container.classList.add('show');
                    dropdownBtn.classList.add('active');
                    document.body.classList.add('dropdown-open');
                    
                    // ƒê·∫£m b·∫£o dropdown hi·ªÉn th·ªã tr√™n c√πng
                    container.style.zIndex = '10000';
                    
                    // ƒê·∫£m b·∫£o dropdown kh√¥ng b·ªã che khu·∫•t b·ªüi c√°c ph·∫ßn t·ª≠ kh√°c
                    document.querySelectorAll('.top-projects, .results-container, .projects-grid, .project-card').forEach(el => {
                        el.style.position = 'relative';
                        el.style.zIndex = '1';
                    });
                    
                    // ƒê∆∞a dropdown l√™n tr√™n c√πng
                    container.parentNode.appendChild(container);
                } else {
                    container.classList.remove('show');
                    dropdownBtn.classList.remove('active');
                    document.body.classList.remove('dropdown-open');
                    
                    // N·∫øu dropdown ƒë√£ ƒë∆∞·ª£c di chuy·ªÉn ra body, ƒë∆∞a n√≥ v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
                    if ($(container).hasClass('moved-to-body')) {
                        const originalParent = $(container).data('original-parent');
                        if (originalParent) {
                            $(container).appendTo(originalParent)
                                .removeClass('moved-to-body')
                                .css({
                                    'position': '',
                                    'top': '',
                                    'left': '',
                                    'width': '',
                                    'z-index': ''
                                });
                        }
                    }
                }
            }
            
            // M·ªü dropdown khi click v√†o button
            dropdownBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                
                // N·∫øu dropdown ƒëang m·ªü, ƒë√≥ng n√≥
                if (isDropdownOpen) {
                    toggleDropdown();
                    return;
                }
                
                // N·∫øu dropdown ƒëang ƒë√≥ng, m·ªü n√≥
                toggleDropdown();
                
                // ƒê·∫£m b·∫£o v·ªã tr√≠ dropdown ƒë∆∞·ª£c t√≠nh to√°n l·∫°i
                setTimeout(function() {
                    if (isDropdownOpen && $(container).hasClass('moved-to-body')) {
                        const dropdownBtn = $('#dropdownCategorySkillsBtn');
                        const btnPosition = dropdownBtn.offset();
                        const btnHeight = dropdownBtn.outerHeight();
                        const containerWidth = $(container).outerWidth();
                        
                        // T√≠nh to√°n v·ªã tr√≠
                        const left = Math.max(10, btnPosition.left);
                        const top = btnPosition.top + btnHeight + 5;
                        
                        // ƒê·∫£m b·∫£o dropdown kh√¥ng v∆∞·ª£t qu√° m√†n h√¨nh b√™n ph·∫£i
                        const windowWidth = $(window).width();
                        const rightEdge = left + containerWidth;
                        const adjustedLeft = rightEdge > windowWidth ? Math.max(10, windowWidth - containerWidth - 10) : left;
                        
                        // C·∫≠p nh·∫≠t v·ªã tr√≠
                        $(container).css({
                            'top': top + 'px',
                            'left': adjustedLeft + 'px',
                            'width': Math.min(containerWidth, windowWidth - 20) + 'px',
                            'max-height': ($(window).height() - top - 20) + 'px'
                        });
                    }
                }, 10);
            });
            
            // NgƒÉn dropdown ƒë√≥ng khi click v√†o n·ªôi dung dropdown
            container.addEventListener('click', function(e) {
                e.stopPropagation();
            });
            
            // Hi·ªÉn th·ªã danh m·ª•c con khi ch·ªçn danh m·ª•c ch√≠nh
            categoryItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // X√≥a tr·∫°ng th√°i active c·ªßa t·∫•t c·∫£ danh m·ª•c
                    categoryItems.forEach(ci => ci.classList.remove('active'));
                    
                    // Th√™m tr·∫°ng th√°i active cho danh m·ª•c ƒë∆∞·ª£c ch·ªçn
                    this.classList.add('active');
                    
                    const categoryId = this.dataset.categoryId;
                    selectedCategoryId = categoryId;
                    
                    // ·∫®n t·∫•t c·∫£ danh m·ª•c con v√† hi·ªÉn th·ªã danh m·ª•c con c·ªßa danh m·ª•c ƒë∆∞·ª£c ch·ªçn
                    document.querySelectorAll('.subcategory-group').forEach(group => {
                        group.style.display = 'none';
                    });
                    
                    const subcategoryGroup = document.getElementById(`subcategory-${categoryId}`);
                    if (subcategoryGroup) {
                        subcategoryGroup.style.display = 'block';
                    }
                    
                    // Hi·ªÉn th·ªã k·ªπ nƒÉng c·ªßa danh m·ª•c ƒë∆∞·ª£c ch·ªçn
                    document.querySelectorAll('.skill-group').forEach(group => {
                        group.style.display = 'none';
                    });
                    
                    const skillGroup = document.getElementById(`skills-${categoryId}`);
                    if (skillGroup) {
                        skillGroup.style.display = 'block';
                    }
                    
                    // X√≥a tr·∫°ng th√°i active c·ªßa t·∫•t c·∫£ danh m·ª•c con
                    subcategoryItems.forEach(sci => sci.classList.remove('active'));
                });
            });
            
            // Hi·ªÉn th·ªã k·ªπ nƒÉng khi ch·ªçn danh m·ª•c con
            subcategoryItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // X√≥a tr·∫°ng th√°i active c·ªßa t·∫•t c·∫£ danh m·ª•c con
                    subcategoryItems.forEach(sci => sci.classList.remove('active'));
                    
                    // Th√™m tr·∫°ng th√°i active cho danh m·ª•c con ƒë∆∞·ª£c ch·ªçn
                    this.classList.add('active');
                    
                    const subcategoryId = this.dataset.subcategoryId;
                    selectedCategoryId = subcategoryId;
                    
                    // Hi·ªÉn th·ªã k·ªπ nƒÉng c·ªßa danh m·ª•c con ƒë∆∞·ª£c ch·ªçn
                    document.querySelectorAll('.skill-group').forEach(group => {
                        group.style.display = 'none';
                    });
                    
                    const skillGroup = document.getElementById(`skills-${subcategoryId}`);
                    if (skillGroup) {
                        skillGroup.style.display = 'block';
                    }
                });
            });
            
            // H√†m c·∫≠p nh·∫≠t danh s√°ch k·ªπ nƒÉng ƒë√£ ch·ªçn
            function updateSelectedSkillsList() {
                // X√≥a t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ con hi·ªán t·∫°i
                while (selectedSkillsList.firstChild) {
                    selectedSkillsList.removeChild(selectedSkillsList.firstChild);
                }
                
                // X√≥a t·∫•t c·∫£ input hidden hi·ªán t·∫°i
                while (skillIdsContainer.firstChild) {
                    skillIdsContainer.removeChild(skillIdsContainer.firstChild);
                }
                
                // Hi·ªÉn th·ªã ho·∫∑c ·∫©n container d·ª±a tr√™n s·ªë l∆∞·ª£ng k·ªπ nƒÉng ƒë√£ ch·ªçn
                if (selectedSkillIds.length > 0) {
                    selectedSkillsContainer.classList.remove('d-none');
                } else {
                    selectedSkillsContainer.classList.add('d-none');
                }
                
                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng k·ªπ nƒÉng ƒë√£ ch·ªçn
                selectedSkillsCount.textContent = selectedSkillIds.length;
                
                // Th√™m c√°c k·ªπ nƒÉng ƒë√£ ch·ªçn v√†o danh s√°ch
                selectedSkillIds.forEach(skillId => {
                    const skillItem = document.querySelector(`.skill-item[data-skill-id="${skillId}"]`);
                    if (skillItem) {
                        const skillName = skillItem.dataset.skillName;
                        const categoryId = skillItem.dataset.categoryId;
                        
                        // T·∫°o ph·∫ßn t·ª≠ m·ªõi cho danh s√°ch k·ªπ nƒÉng ƒë√£ ch·ªçn
                        const newSkillItem = document.createElement('a');
                        newSkillItem.href = '#';
                        newSkillItem.className = 'list-group-item list-group-item-action skill-item selected';
                        newSkillItem.dataset.skillId = skillId;
                        newSkillItem.dataset.categoryId = categoryId;
                        newSkillItem.dataset.skillName = skillName;
                        
                        const itemContent = document.createElement('div');
                        itemContent.className = 'd-flex justify-content-between align-items-center';
                        
                        const nameSpan = document.createElement('span');
                        nameSpan.textContent = skillName;
                        
                        const checkIcon = document.createElement('i');
                        checkIcon.className = 'bi bi-check-lg text-success';
                        
                        itemContent.appendChild(nameSpan);
                        itemContent.appendChild(checkIcon);
                        newSkillItem.appendChild(itemContent);
                        
                        // Th√™m s·ª± ki·ªán click ƒë·ªÉ b·ªè ch·ªçn k·ªπ nƒÉng
                        newSkillItem.addEventListener('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            toggleSkillSelection(skillId);
                        });
                        
                        selectedSkillsList.appendChild(newSkillItem);
                        
                        // T·∫°o input hidden cho k·ªπ nƒÉng ƒë√£ ch·ªçn
                        const hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.name = 'skillIds';
                        hiddenInput.value = skillId;
                        skillIdsContainer.appendChild(hiddenInput);
                    }
                });
            }
            
            // H√†m ch·ªçn/b·ªè ch·ªçn k·ªπ nƒÉng
            function toggleSkillSelection(skillId) {
                const index = selectedSkillIds.indexOf(skillId);
                const skillItems = document.querySelectorAll(`.skill-item[data-skill-id="${skillId}"]`);
                
                if (index === -1) {
                    // Th√™m k·ªπ nƒÉng v√†o danh s√°ch ƒë√£ ch·ªçn
                    selectedSkillIds.push(skillId);
                    skillItems.forEach(item => {
                        item.classList.add('selected');
                        
                        // Th√™m icon check n·∫øu ch∆∞a c√≥
                        if (!item.querySelector('.bi-check-lg')) {
                            const itemContent = item.querySelector('div') || item;
                            const checkIcon = document.createElement('i');
                            checkIcon.className = 'bi bi-check-lg text-success';
                            itemContent.appendChild(checkIcon);
                        }
                    });
                } else {
                    // X√≥a k·ªπ nƒÉng kh·ªèi danh s√°ch ƒë√£ ch·ªçn
                    selectedSkillIds.splice(index, 1);
                    skillItems.forEach(item => {
                        item.classList.remove('selected');
                        
                        // X√≥a icon check
                        const checkIcon = item.querySelector('.bi-check-lg');
                        if (checkIcon) {
                            checkIcon.remove();
                        }
                    });
                }
                
                // C·∫≠p nh·∫≠t danh s√°ch k·ªπ nƒÉng ƒë√£ ch·ªçn
                updateSelectedSkillsList();
            }
            
            // Ch·ªçn/b·ªè ch·ªçn k·ªπ nƒÉng
            skillItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const skillId = this.dataset.skillId;
                    toggleSkillSelection(skillId);
                });
            });
            
            // X·ª≠ l√Ω n√∫t H·ªßy
            clearBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                selectedCategoryId = null;
                selectedSkillIds = [];
                
                // X√≥a tr·∫°ng th√°i active c·ªßa t·∫•t c·∫£ danh m·ª•c, danh m·ª•c con
                categoryItems.forEach(ci => ci.classList.remove('active'));
                subcategoryItems.forEach(sci => sci.classList.remove('active'));
                
                // X√≥a tr·∫°ng th√°i selected c·ªßa t·∫•t c·∫£ k·ªπ nƒÉng
                skillItems.forEach(si => {
                    si.classList.remove('selected');
                    const checkIcon = si.querySelector('.bi-check-lg');
                    if (checkIcon) {
                        checkIcon.remove();
                    }
                });
                
                // C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã
                document.getElementById('selectedCategorySkill').innerText = 'üë®‚Äçüíº Ch·ªçn Nh√≥m ngh·ªÅ, Ngh·ªÅ ho·∫∑c Chuy√™n m√¥n';
                
                // C·∫≠p nh·∫≠t gi√° tr·ªã input hidden
                document.getElementById('hiddenCategoryId').value = '';
                
                // C·∫≠p nh·∫≠t danh s√°ch k·ªπ nƒÉng ƒë√£ ch·ªçn
                updateSelectedSkillsList();
            });
            
            // X·ª≠ l√Ω n√∫t Ch·ªçn
            applyBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // C·∫≠p nh·∫≠t gi√° tr·ªã input hidden
                document.getElementById('hiddenCategoryId').value = selectedCategoryId || '';
                
                // C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã
                let displayText = 'üë®‚Äçüíº Ch·ªçn Nh√≥m ngh·ªÅ, Ngh·ªÅ ho·∫∑c Chuy√™n m√¥n';
                
                if (selectedSkillIds.length > 0) {
                    if (selectedSkillIds.length === 1) {
                        const selectedSkill = document.querySelector(`.skill-item[data-skill-id="${selectedSkillIds[0]}"]`);
                        if (selectedSkill) {
                            displayText = selectedSkill.dataset.skillName;
                        }
                    } else {
                        displayText = `${selectedSkillIds.length} v·ªã tr√≠ chuy√™n m√¥n`;
                    }
                } else if (selectedCategoryId) {
                    const selectedCategory = document.querySelector(`.category-item[data-category-id="${selectedCategoryId}"]`);
                    const selectedSubcategory = document.querySelector(`.subcategory-item[data-subcategory-id="${selectedCategoryId}"]`);
                    
                    if (selectedSubcategory) {
                        displayText = selectedSubcategory.innerText;
                    } else if (selectedCategory) {
                        displayText = selectedCategory.innerText;
                    }
                }
                
                document.getElementById('selectedCategorySkill').innerText = displayText;
                
                // ƒê√≥ng dropdown
                isDropdownOpen = false;
                container.classList.remove('show');
                dropdownBtn.classList.remove('active');
            });
            
            // ƒê√≥ng dropdown khi nh·∫•n n√∫t t√¨m ki·∫øm
            searchBtn.addEventListener('click', function() {
                isDropdownOpen = false;
                container.classList.remove('show');
                dropdownBtn.classList.remove('active');
            });
            
            // Hi·ªÉn th·ªã ban ƒë·∫ßu n·∫øu c√≥ gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn
            if (selectedCategoryId) {
                // T√¨m v√† k√≠ch ho·∫°t danh m·ª•c ƒë∆∞·ª£c ch·ªçn
                const selectedCategory = document.querySelector(`.category-item[data-category-id="${selectedCategoryId}"]`);
                const selectedSubcategory = document.querySelector(`.subcategory-item[data-subcategory-id="${selectedCategoryId}"]`);
                
                if (selectedSubcategory) {
                    // N·∫øu l√† danh m·ª•c con, k√≠ch ho·∫°t danh m·ª•c cha tr∆∞·ªõc
                    const parentId = selectedSubcategory.dataset.parentId;
                    const parentCategory = document.querySelector(`.category-item[data-category-id="${parentId}"]`);
                    if (parentCategory) {
                        parentCategory.click();
                    }
                    selectedSubcategory.click();
                } else if (selectedCategory) {
                    selectedCategory.click();
                }
            }
            
            // C·∫≠p nh·∫≠t danh s√°ch k·ªπ nƒÉng ƒë√£ ch·ªçn ban ƒë·∫ßu
            updateSelectedSkillsList();
            
            // ƒê√≥ng dropdown khi click ra ngo√†i
            document.addEventListener('click', function(event) {
                if (isDropdownOpen && !container.contains(event.target) && event.target !== dropdownBtn && !dropdownBtn.contains(event.target)) {
                    isDropdownOpen = false;
                    container.classList.remove('show');
                    dropdownBtn.classList.remove('active');
                    document.body.classList.remove('dropdown-open');
                    
                    // N·∫øu dropdown ƒë√£ ƒë∆∞·ª£c di chuy·ªÉn ra body, ƒë∆∞a n√≥ v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
                    if ($(container).hasClass('moved-to-body')) {
                        const originalParent = $(container).data('original-parent');
                        if (originalParent) {
                            $(container).appendTo(originalParent)
                                .removeClass('moved-to-body')
                                .css({
                                    'position': '',
                                    'top': '',
                                    'left': '',
                                    'width': '',
                                    'z-index': ''
                                });
                        }
                    }
                }
            });
        });
    </script>
} 