@model StudentFreelance.ViewModels.SearchStudentsViewModel
@using System.Linq
@{
    ViewData["Title"] = "T√¨m ki·∫øm sinh vi√™n";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    var students = Model.Students;
    var skills = Model.Skills;
    var categories = Model.Categories;
    var selectedSkillIds = Model.SelectedSkillIds;
    
    // Create a list of selected skills for display purposes
    var selectedSkills = new List<dynamic>();
    foreach (var skillId in selectedSkillIds)
    {
        var skill = skills.FirstOrDefault(s => s.SkillID == skillId);
        if (skill != null)
        {
            selectedSkills.Add(new { SkillID = skill.SkillID, SkillName = skill.SkillName });
        }
    }
}

@section Styles {
    <link rel="stylesheet" href="~/css/search/searchStudents.css" asp-append-version="true" />
}

<div class="container my-5 search-students-container">
    <div class="topbar">
        <h1><i class="bi bi-search"></i> T√¨m ki·∫øm sinh vi√™n</h1>
        
        <form method="get" asp-action="SearchStudents" class="filter-row">
            <div class="filter-group">
                <input type="text" name="query" value="@ViewBag.Query" placeholder="üîç T√¨m ki·∫øm sinh vi√™n..." />
            </div>

            <div class="filter-group">
                <select id="skillSelect" name="skillIds" class="custom-select" multiple="multiple">
                    <option value="">üë®‚Äçüéì Ch·ªçn k·ªπ nƒÉng...</option>
                    @foreach (var category in categories)
                    {
                        <optgroup label="@category.CategoryName">
                            @foreach (var skill in skills.Where(s => s.CategoryID == category.CategoryID))
                            {
                                if (selectedSkillIds.Contains(skill.SkillID))
                                {
                                    <option value="@skill.SkillID" selected>@skill.SkillName</option>
                                }
                                else
                                {
                                    <option value="@skill.SkillID">@skill.SkillName</option>
                                }
                            }
                        </optgroup>
                    }
                </select>
            </div>

            <div class="filter-group">
                <select name="provinceCode" class="custom-select">
                    <option value="">üìç T·∫•t c·∫£ t·ªânh/th√†nh</option>
                    @foreach (var province in ViewBag.Provinces)
                    {
                        if (ViewBag.ProvinceCode != null && ViewBag.ProvinceCode == province.ID)
                        {
                            <option value="@province.ID" selected>@province.Name</option>
                        }
                        else
                        {
                            <option value="@province.ID">@province.Name</option>
                        }
                    }
                </select>
            </div>
            
            <button type="submit" class="filter-btn">
                <i class="bi bi-filter"></i> T√¨m ki·∫øm
            </button>
            
            <a href="@Url.Action("SearchStudents", "Search")" class="reset-btn">
                <i class="bi bi-x-circle"></i> X√≥a b·ªô l·ªçc
            </a>
        </form>
    </div>

    <div class="row student-list mt-4">
        @if (students.Any())
        {
            foreach (var student in students)
            {
                var studentSkills = ViewBag.StudentSkills.ContainsKey(student.Id)
                    ? ViewBag.StudentSkills[student.Id]
                    : new List<StudentFreelance.Models.StudentSkill>();
                
                <div class="col-md-12 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-2 text-center">
                                    @if (!string.IsNullOrEmpty(student.ProfilePicturePath))
                                    {
                                        <img src="@student.ProfilePicturePath" alt="@student.FullName" class="img-fluid rounded-circle mb-2" style="width: 100px; height: 100px; object-fit: cover;">
                                    }
                                    else if (!string.IsNullOrEmpty(student.Avatar))
                                    {
                                        <img src="@student.Avatar" alt="@student.FullName" class="img-fluid rounded-circle mb-2" style="width: 100px; height: 100px; object-fit: cover;">
                                    }
                                    else
                                    {
                                        <div class="profile-avatar-placeholder mb-2" style="width: 100px; height: 100px; font-size: 36px;">
                                            @(student.FullName?.Length > 0 ? student.FullName[0].ToString() : "?")
                                        </div>
                                    }
                                </div>
                                <div class="col-md-7">
                                    <h5 class="student-name">
                                        @student.FullName
                                    </h5>
                                    
                                    <div class="mb-2">
                                        @if (!string.IsNullOrEmpty(student.University))
                                        {
                                            <div><i class="bi bi-mortarboard-fill me-2"></i>@student.University</div>
                                        }
                                        @if (!string.IsNullOrEmpty(student.Major))
                                        {
                                            <div><i class="bi bi-journal-bookmark-fill me-2"></i>@student.Major</div>
                                        }
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="info-badge rating-badge me-2">
                                            <i class="bi bi-star-fill me-1"></i>
                                            @(student.AverageRating > 0 ? student.AverageRating.ToString("F1") : "Ch∆∞a c√≥ ƒë√°nh gi√°")
                                        </div>
                                        <div class="info-badge project-badge">
                                            <i class="bi bi-briefcase-fill me-1"></i>
                                            @student.TotalProjects ho√†n th√†nh
                                        </div>
                                        @if (student.IsVerified)
                                        {
                                            <div class="verified-badge">
                                                <i class="fas fa-check-circle me-1"></i>
                                                <span>Verified</span>
                                            </div>
                                        }
                                    </div>

                                    <div class="mt-3">
                                        <h6 class="skills-title">K·ªπ nƒÉng</h6>
                                        <div>
                                            @{
                                                var userSkills = ViewBag.StudentSkills != null && ViewBag.StudentSkills.ContainsKey(student.Id) 
                                                    ? ViewBag.StudentSkills[student.Id] 
                                                    : new List<StudentFreelance.Models.StudentSkill>();
                                            }
                                            @if (userSkills != null && userSkills.Count > 0)
                                            {
                                                var skillCounter = 0;
                                                var maxSkillsToShow = 5;
                                                
                                                @foreach (var ss in userSkills)
                                                {
                                                    if (skillCounter < maxSkillsToShow)
                                                    {
                                                        <span class="skill-tag">
                                                            @ss.Skill.SkillName
                                                            <span class="skill-level">(@ss.ProficiencyLevel.LevelName)</span>
                                                        </span>
                                                        skillCounter++;
                                                    }
                                                }
                                                
                                                @if (userSkills.Count > maxSkillsToShow)
                                                {
                                                    <span class="skill-tag">+@(userSkills.Count - maxSkillsToShow) kh√°c</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">Ch∆∞a c√≥ k·ªπ nƒÉng</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3 d-flex align-items-center justify-content-center">
                                    <a href="@Url.Action("Profile", "User", new { id = student.Id })" class="btn btn-view-profile btn-lg">
                                        <i class="bi bi-person-badge me-1"></i>Xem h·ªì s∆°
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ti√™u ch√≠ kh√°c.
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Fix cho dropdown ph·∫£i b·∫•m 2 l·∫ßn
            // H·ªßy b·ªè t·∫•t c·∫£ c√°c event handlers ƒë√£ g·∫Øn v√†o tr∆∞·ªõc ƒë√≥
            $('select[name="provinceCode"]').off();
            $('#skillSelect').off();
            
            // Kh·ªüi t·∫°o l·∫°i Select2 v·ªõi t√πy ch·ªçn m·ªõi
            $('select[name="provinceCode"]').select2({
                placeholder: "üìç T·∫•t c·∫£ t·ªânh/th√†nh",
                allowClear: true,
                dropdownCssClass: 'province-dropdown',
                width: '100%'
            }).on('select2:open', function() {
                // ƒê·∫£m b·∫£o dropdown hi·ªÉn th·ªã ƒë√∫ng v·ªã tr√≠ v√† z-index
                setTimeout(function() {
                    $('.province-dropdown').parent().css('z-index', '10000');
                }, 0);
            });
            
            // Skills dropdown using Select2
            $('#skillSelect').select2({
                placeholder: "üë®‚Äçüéì Ch·ªçn k·ªπ nƒÉng...",
                allowClear: true,
                closeOnSelect: false,
                width: '100%',
                dropdownCssClass: 'select2-dropdown-skills',
                templateResult: formatSkill,
                maximumSelectionLength: 15,
                language: {
                    noResults: function() {
                        return "Kh√¥ng t√¨m th·∫•y k·ªπ nƒÉng";
                    },
                    maximumSelected: function() {
                        return "B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn t·ªëi ƒëa 15 k·ªπ nƒÉng";
                    }
                }
            }).on('select2:open', function() {
                // ƒê·∫£m b·∫£o dropdown hi·ªÉn th·ªã ƒë√∫ng v·ªã tr√≠ v√† z-index
                setTimeout(function() {
                    $('.select2-dropdown-skills').parent().css('z-index', '10000');
                    $('.select2-dropdown').css('z-index', '10000');
                    
                    // Th√™m n√∫t ch·ªçn t·∫•t c·∫£ v√† x√≥a t·∫•t c·∫£ n·∫øu ch∆∞a c√≥
                    if ($('.select2-buttons-container').length === 0) {
                        var $dropdown = $('.select2-dropdown-skills');
                        var selectAllButton = '<div class="select2-buttons-container">' +
                                             '<span class="select2-select-all">Ch·ªçn t·∫•t c·∫£</span>' +
                                             '<span class="select2-deselect-all">H·ªßy ch·ªçn t·∫•t c·∫£</span>' +
                                             '</div>';
                        $dropdown.prepend(selectAllButton);
                        
                        // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n "Ch·ªçn t·∫•t c·∫£"
                        $('.select2-select-all').on('click', function() {
                            var options = $('#skillSelect option');
                            var values = [];
                            options.each(function() {
                                values.push($(this).val());
                            });
                            $('#skillSelect').val(values).trigger('change');
                        });
                        
                        // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n "H·ªßy ch·ªçn t·∫•t c·∫£"
                        $('.select2-deselect-all').on('click', function() {
                            $('#skillSelect').val(null).trigger('change');
                        });
                    }
                }, 0);
            });
            
            // C·∫≠p nh·∫≠t label hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn
            $('#skillSelect').on('change', function() {
                updateSelectedSkillsLabel();
            });
            
            function updateSelectedSkillsLabel() {
                var selectedCount = $('#skillSelect').val() ? $('#skillSelect').val().length : 0;
                var $renderContainer = $('#skillSelect').siblings('.select2-container').find('.select2-selection__rendered');
                
                if (selectedCount > 0) {
                    if (selectedCount === 1) {
                        var selectedText = $('#skillSelect option:selected').text();
                        $renderContainer.html('<span>' + selectedText + '</span>');
                    } else {
                        $renderContainer.html('<span>ƒê√£ ch·ªçn <span class="select-count">' + selectedCount + '</span> k·ªπ nƒÉng</span>');
                    }
                }
            }
            
            // ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã k·ªπ nƒÉng
            function formatSkill(skill) {
                if (!skill.id) {
                    return skill.text;
                }
                
                return $('<span>' + skill.text + '</span>');
            }
            
            // ƒê·∫£m b·∫£o dropdown lu√¥n hi·ªÉn th·ªã ph√≠a tr√™n khi cu·ªôn trang
            $(window).on('scroll resize', function() {
                var openDropdown = $(".select2-container--open");
                if (openDropdown.length) {
                    openDropdown.css({
                        'z-index': '10000',
                        'position': 'absolute'
                    });
                }
            });
            
            // S·ª≠a l·ªói click b·ªã double
            $('span.select2').on('click', function(e) {
                // NgƒÉn s·ª± ki·ªán click lan truy·ªÅn ƒë·∫øn c√°c ph·∫ßn t·ª≠ cha
                e.stopPropagation();
            });
            
            // ƒê·∫£m b·∫£o c√°c dropdowns kh·ªüi t·∫°o ƒë√∫ng
            setTimeout(function() {
                $('select[name="provinceCode"]').trigger('select2:close').trigger('select2:open').trigger('select2:close');
                $('#skillSelect').trigger('select2:close');
                
                // C·∫≠p nh·∫≠t label ban ƒë·∫ßu
                updateSelectedSkillsLabel();
            }, 100);
        });
    </script>
} 