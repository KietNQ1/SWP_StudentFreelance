@model StudentFreelance.ViewModels.ChatRoomWithSidebarViewModel
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

    @{
        ViewData["Title"] = "Cuộc trò chuyện";
        var conversationId = Model.ConversationID.ToString();
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

    <style>
    .chat-container {
        height: 90vh;
        display: flex;
        overflow: hidden;
    }

    .sidebar {
        width: 30%;
        background-color: #F8F8F8;
        overflow-y: auto;
        border-right: 1px solid #ddd;
        padding: 1rem;
        }

        .chat-area {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #fff;
        border-radius: 0 12px 12px 0;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

    .chat-header {
        background-color: #89AC46;
        color: white;
        padding: 1rem;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-body {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem;
        background-color: #f3f3f3;
        height: 70vh;
    }

    .chat-footer {
        padding: 1rem;
        border-top: 1px solid #ccc;
        background-color: white;
        }

        .message-box {
        max-width: 70%;
        padding: 10px 15px;
            border-radius: 20px;
        margin-bottom: 10px;
        word-wrap: break-word; 
        word-break: break-word; 
        overflow-wrap: break-word;
        }

        .message-left {
        background-color: #FFFBE6;
        color: #000;
        align-self: flex-start;
        }

        .message-right {
        background-color: #626F47;
        color: #fff;
        align-self: flex-end;
        }

        .send-button {
            background-color: #89AC46;
        border: none;
            color: white;
        border-radius: 30px;
            padding: 8px 20px;
            transition: background-color 0.3s ease-in-out;
        }

            .send-button:hover {
                background-color: #6f963a;
                cursor: pointer;
            }

    .message-meta {
        font-size: 0.8rem;
        color: gray;
        margin-top: 4px;
    }

        .back-button {
        background-color: transparent;
            color: white;
        border: 1px solid white;
        border-radius: 20px;
        padding: 5px 15px;
        font-size: 0.9rem;
            text-decoration: none;
        transition: all 0.2s ease-in-out;
        }

            .back-button:hover {
        background-color: rgba(255, 255, 255, 0.2);
        color: white;
    }

    .attachment-btn {
        border: none;
        background-color: transparent;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 8px 12px;
    }

    .conversation-card {
        background: #fff;
        border-radius: 12px;
        padding: 12px;
        margin-bottom: 12px;
        cursor: pointer;
        border: 1px solid transparent;
        transition: all 0.2s ease-in-out;
    }

    .conversation-card:hover {
        background-color: #D3E671;
        border-color: #ccc;
    }

    .conversation-card.active {
        background-color: #89AC46;
        color: white;
    }

    .conversation-card.active .conversation-meta {
        color: rgba(255, 255, 255, 0.8);
            }

    .conversation-title {
        font-weight: 600;
        color: #333;
    }

    .conversation-card.active .conversation-title {
        color: white;
    }

    .conversation-meta {
        font-size: 0.85rem;
        color: gray;
    }

    .conversation-badge {
        background-color: #dc3545;
        color: white;
        padding: 2px 6px;
        border-radius: 12px;
        font-size: 0.75rem;
        margin-left: 8px;
        }

    .conversation-avatar {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 50%;
        margin-right: 12px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
    </style>

<div class="chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <form method="get" asp-action="Room" asp-route-id="@Model.ConversationID">
            <select name="projectId" class="form-select mb-3" onchange="this.form.submit()">
                <option value="">Tất cả dự án</option>
                @foreach (var p in Model.Projects)
                {
                    <option value="@p.ProjectID" selected="@(Model.SelectedProjectID == p.ProjectID)">
                        @p.Title
                    </option>
                }
            </select>
        </form>

        @foreach (var c in Model.Conversations)
        {
            var isActive = c.ConversationID == Model.ConversationID;
            <div class="conversation-card d-flex align-items-center @(isActive ? "active" : "")" onclick="location.href='@Url.Action("Room", new { id = c.ConversationID, projectId = Model.SelectedProjectID })'">
                <img src="@(c.OtherUserAvatar ?? "/images/default-avatar.png")" class="conversation-avatar" />
                <div>
                    <div class="conversation-title">
                        @c.OtherUserName
                        @if (c.UnreadCount > 0)
                        {
                            <span class="conversation-badge">@c.UnreadCount</span>
                        }
                    </div>
                    <div class="conversation-meta">Dự Án: @c.ProjectTitle</div>
                    <div class="conversation-meta">
                        @c.LastMessageAt.ToLocalTime().ToString("g") – @c.LastMessage
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Chat Area -->
    <div class="chat-area">
        <div class="chat-header">
            <h5 class="mb-0">@Model.OtherUserName</h5>
            <a asp-action="Index" asp-controller="Chat" class="back-button">← Quay lại</a>
        </div>
        <div class="chat-body" id="chatWindow">
            @foreach (var m in Model.Messages)
            {
                var alignment = m.IsMine ? "justify-content-end" : "justify-content-start";
                var bubbleClass = m.IsMine ? "message-box message-right" : "message-box message-left";

                var contentHtml = m.MessageType switch
                {
                    "image" => $"<img src='{m.Content}' style='max-width:200px; border-radius:8px;' />",
                    "file" => $"<a href='{m.Content}' target='_blank' style='color: inherit; text-decoration: none;'>📄 File đính kèm</a>",
                    _ => m.Content
                };

                <div class="d-flex @alignment mb-2">
                    <div class="@bubbleClass">
                        @Html.Raw(contentHtml)
                            <div class="message-meta">@m.SentAt.ToLocalTime().ToString("HH:mm dd/MM")</div>
                        </div>
                    </div>
            }
        </div>

        <div class="chat-footer">
            <form id="chatForm" class="d-flex w-100">
                @Html.AntiForgeryToken()
                <input type="hidden" id="conversationId" name="conversationID" value="@Model.ConversationID" />
                <input type="text" id="messageInput" name="content" class="form-control me-2" placeholder="Nhập tin nhắn..." autocomplete="off" />
                <label for="fileInput" class="attachment-btn me-2" title="Đính kèm">
                    📎
                </label>
                <input type="file" id="fileInput" class="d-none" />
                <button id="sendBtn" type="button" class="send-button">
                    <i class="bi bi-send-fill"></i> Gửi
                </button>
            </form>
        </div>
    </div>
    </div>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
        <script>
            const convId = '@Model.ConversationID';
            const currentUserId = parseInt('@userId', 10);
            const chatWin = document.getElementById("chatWindow");
            function scrollToBottom() {
                chatWin.scrollTop = chatWin.scrollHeight;
            }
            scrollToBottom();

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .build();

            connection.on("ReceiveMessage", msg => {
                if (msg.conversationID !== convId) return;

                const isMine = msg.senderId === currentUserId;

                //  Xử lý nội dung tin nhắn: text / image / file
                let messageHtml = "";
                if (msg.content.match(/\.(jpg|jpeg|png|gif)$/i)) {
                    messageHtml = `<img src="${msg.content}" style="max-width: 200px; border-radius: 8px;" />`;
                } else if (msg.content.match(/\.(docx?|pdf)$/i)) {
                messageHtml = `<a href="${msg.content}" target="_blank" style="color: inherit; text-decoration: none;">📄 File đính kèm</a>`;
                } else {
                    messageHtml = msg.content;
                }

                const div = document.createElement("div");
                div.className = "mb-2 d-flex " + (isMine ? "justify-content-end" : "justify-content-start");

                div.innerHTML = `
                <div class="message-box ${isMine ? "message-right" : "message-left"}">
                        ${messageHtml}
                        <div class="message-meta">${new Date(msg.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} ${new Date(msg.sentAt).toLocaleDateString()}</div>
                    </div>
                `;

                chatWin.appendChild(div);
                scrollToBottom();
            });


            (async function () {
                try {
                    await connection.start();
                    await connection.invoke("JoinConversation", convId);
                } catch (err) {
                    console.error("SignalR error:", err);
                }
            })();

            document.getElementById("sendBtn").addEventListener("click", sendMessage);

            document.getElementById("messageInput").addEventListener("keydown", function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    sendMessage();
                }
            });

                           async function sendMessage() {
                const input = document.getElementById("messageInput");
                const fileInput = document.getElementById("fileInput");
                const file = fileInput.files[0];
                const text = input.value.trim();

                //  Nếu có file → upload và gửi file
                if (file) {
                    const formData = new FormData();
                    formData.append("file", file);
                    formData.append("conversationId", convId);

                    try {
                        const res = await fetch("/Upload/UploadFile", {
                            method: "POST",
                            body: formData
                        });

                        const data = await res.json();
                        const fileUrl = data.fileUrl;

                        //  Gửi SignalR
                        await connection.invoke("SendMessage", convId, currentUserId, fileUrl);

                        //  Gửi vào DB
                        await fetch('@Url.Action("Send", "Chat")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: `conversationID=${encodeURIComponent(convId)}&content=${encodeURIComponent(fileUrl)}`
                        });

                        fileInput.value = "";
                    } catch (err) {
                        alert("Gửi file thất bại: " + err.message);
                    }

                    return;
                }

                //  Nếu không có file → gửi văn bản
                if (!text) return;

                try {
                    await connection.invoke("SendMessage", convId, currentUserId, text);
                    await fetch('@Url.Action("Send", "Chat")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: `conversationID=${encodeURIComponent(convId)}&content=${encodeURIComponent(text)}`
                    });
                } catch (err) {
                    console.error("Gửi message lỗi:", err);
                }

                input.value = "";
                input.focus();
            }
        </script>
    }
