@model StudentFreelance.ViewModels.ChatRoomViewModel
@{
    ViewData["Title"] = "Cuộc trò chuyện";
    var conversationId = Model.ConversationID.ToString();
    var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    body {
        background-color: #f3f3f3;
    }

    .chat-area {
        max-width: 800px;
        margin: auto;
        margin-top: 40px;
        background: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .message-box {
        border-radius: 20px;
        padding: 10px 15px;
        max-width: 70%;
    }

    .message-left {
        background-color: #f1f0f0;
    }

    .message-right {
        background-color: #FF8989;
        color: white;
    }

    .chat-body {
        background-color: #dcdcdc;
        height: 400px;
        overflow-y: auto;
        padding: 16px;
    }

    .message-meta {
        font-size: 0.8rem;
        color: gray;
        margin-top: 4px;
    }

    .send-button {
        background-color: #89AC46;
        color: white;
        padding: 8px 20px;
        border: none;
        border-radius: 30px;
        font-weight: 500;
        transition: background-color 0.3s ease-in-out;
    }

        .send-button:hover {
            background-color: #6f963a;
            cursor: pointer;
        }

    .back-button {
        display: inline-block;
        margin: 24px auto;
        padding: 8px 16px;
        border-radius: 30px;
        background-color: #89AC46;
        color: white;
        font-weight: 500;
        font-size: 0.95rem;
        border: none;
        text-decoration: none;
        transition: all 0.3s ease-in-out;
    }

        .back-button:hover {
            background-color: #6f963a;
            color: #fff;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
        }

    .chat-footer input {
        flex-grow: 1;
    }
    .a{
        text-decoration:none;
    }
</style>

<div class="chat-area border shadow-sm">
    <!-- Header -->
    <div class="chat-header p-3 border-bottom" style="background-color: #89AC46; color: white;">
        <h5 class="mb-0">@Model.OtherUserName</h5>
    </div>

    <!-- Body -->
    <div class="chat-body" id="chatWindow">
        @foreach (var m in Model.Messages)
        {
            var messageHtml = m.MessageType switch
            {
                "image" => $"<img src='{m.Content}' style='max-width: 200px; border-radius: 8px;' />",
                "file" => $"<a href='{m.Content}' target='_blank'>📄 File đính kèm</a>",
                _ => m.Content
            };

            if (m.IsMine)
            {
                <div class="d-flex justify-content-end mb-2">
                    <div class="message-box message-right text-end">
                        @Html.Raw(messageHtml)
                        <div class="message-meta">@m.SentAt.ToLocalTime().ToString("HH:mm dd/MM")</div>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-start mb-2">
                    <div class="message-box message-left">
                        @Html.Raw(messageHtml)
                        <div class="message-meta">@m.SentAt.ToLocalTime().ToString("HH:mm dd/MM")</div>
                    </div>
                </div>
            }
        }
    </div>


    <!-- Footer -->
    <div class="chat-footer border-top p-3 bg-white d-flex">
        <form id="chatForm" class="d-flex w-100">
            @Html.AntiForgeryToken()
            <input type="hidden" id="conversationId" name="conversationID" value="@Model.ConversationID" />
            <input type="text" id="messageInput" name="content" class="form-control me-2"
                   placeholder="Type something..." autocomplete="off" />
            <button id="sendBtn" type="button" class="send-button">
                <i class="bi bi-send-fill"></i> Gửi
            </button>
            <label for="fileInput" class="btn btn-outline-secondary me-2" title="Đính kèm" style="border-color: #fff">
                📎
            </label>
            <input type="file" id="fileInput" class="d-none" />

        </form>
    </div>
</div>

<div class="text-center">
    <a asp-action="Index" asp-controller="Chat" class="back-button">← Quay lại danh sách</a>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const convId = '@Model.ConversationID';
        const currentUserId = parseInt('@userId', 10);
        const chatWin = document.getElementById("chatWindow");
        function scrollToBottom() {
            chatWin.scrollTop = chatWin.scrollHeight;
        }
        scrollToBottom();

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.on("ReceiveMessage", msg => {
            if (msg.conversationID !== convId) return;

            const isMine = msg.senderId === currentUserId;

            // 👇 Xử lý nội dung tin nhắn: text / image / file
            let messageHtml = "";
            if (msg.content.match(/\.(jpg|jpeg|png|gif)$/i)) {
                messageHtml = `<img src="${msg.content}" style="max-width: 200px; border-radius: 8px;" />`;
            } else if (msg.content.match(/\.(docx?|pdf)$/i)) {
                messageHtml = `<a href="${msg.content}" target="_blank">📄 File đính kèm</a>`;
            } else {
                messageHtml = msg.content;
            }

            const div = document.createElement("div");
            div.className = "mb-2 d-flex " + (isMine ? "justify-content-end" : "justify-content-start");

            div.innerHTML = `
                <div class="message-box ${isMine ? "message-right text-end" : "message-left"}">
                    ${messageHtml}
                    <div class="message-meta">${new Date(msg.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} ${new Date(msg.sentAt).toLocaleDateString()}</div>
                </div>
            `;

            chatWin.appendChild(div);
            scrollToBottom();
        });


        (async function () {
            try {
                await connection.start();
                await connection.invoke("JoinConversation", convId);
            } catch (err) {
                console.error("SignalR error:", err);
            }
        })();

        document.getElementById("sendBtn").addEventListener("click", sendMessage);

        document.getElementById("messageInput").addEventListener("keydown", function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                sendMessage();
            }
        });

                       async function sendMessage() {
            const input = document.getElementById("messageInput");
            const fileInput = document.getElementById("fileInput");
            const file = fileInput.files[0];
            const text = input.value.trim();

            // ✅ Nếu có file → upload và gửi file
            if (file) {
                const formData = new FormData();
                formData.append("file", file);
                formData.append("conversationId", convId);

                try {
                    const res = await fetch("/Upload/UploadFile", {
                        method: "POST",
                        body: formData
                    });

                    const data = await res.json();
                    const fileUrl = data.fileUrl;

                    // ✅ Gửi SignalR
                    await connection.invoke("SendMessage", convId, currentUserId, fileUrl);

                    // ✅ Gửi vào DB
                    await fetch('@Url.Action("Send", "Chat")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: `conversationID=${encodeURIComponent(convId)}&content=${encodeURIComponent(fileUrl)}`
                    });

                    fileInput.value = "";
                } catch (err) {
                    alert("Gửi file thất bại: " + err.message);
                }

                return;
            }

            // ✅ Nếu không có file → gửi văn bản
            if (!text) return;

            try {
                await connection.invoke("SendMessage", convId, currentUserId, text);
                await fetch('@Url.Action("Send", "Chat")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `conversationID=${encodeURIComponent(convId)}&content=${encodeURIComponent(text)}`
                });
            } catch (err) {
                console.error("Gửi message lỗi:", err);
            }

            input.value = "";
            input.focus();
        }

    </script>
}
