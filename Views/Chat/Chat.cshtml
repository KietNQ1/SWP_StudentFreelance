@model StudentFreelance.ViewModels.ChatPageViewModel
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@{
    ViewData["Title"] = "Tin nhắn";
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    .chat-container {
        height: 90vh;
        display: flex;
        overflow: hidden;
    }

    .sidebar {
        width: 30%;
        background-color: #F8F8F8;
        overflow-y: auto;
        border-right: 1px solid #ddd;
        padding: 1rem;
    }

    .chat-area {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #fff;
    }

    .conversation-card {
        background: #fff;
        border-radius: 12px;
        padding: 12px;
        margin-bottom: 12px;
        cursor: pointer;
        border: 1px solid transparent;
        transition: all 0.2s ease-in-out;
    }

        .conversation-card:hover {
            background-color: #D3E671;
            border-color: #ccc;
        }

    .conversation-title {
        font-weight: 600;
        color: #333;
    }

    .conversation-meta {
        font-size: 0.85rem;
        color: gray;
    }

    .conversation-badge {
        background-color: #dc3545;
        color: white;
        padding: 2px 6px;
        border-radius: 12px;
        font-size: 0.75rem;
        margin-left: 8px;
    }

    .chat-header {
        background-color: #89AC46;
        color: white;
        padding: 1rem;
        font-weight: bold;
    }

    .chat-body {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem;
        background-color: #f3f3f3;
    }

    .chat-footer {
        padding: 1rem;
        border-top: 1px solid #ccc;
    }

    .message-box {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 20px;
        margin-bottom: 10px;
        word-wrap: break-word; 
        word-break: break-word; 
        overflow-wrap: break-word;
    }

    .message-left {
        background-color: #FFFBE6;
        color: #000;
        align-self: flex-start;
    }

    .message-right {
        background-color: #626F47;
        color: #fff;
        align-self: flex-end;
    }

    .send-button {
        background-color: #89AC46;
        border: none;
        color: white;
        border-radius: 30px;
        padding: 8px 20px;
    }

    .message-meta {
        font-size: 0.8rem;
        color: gray;
        margin-top: 4px;
    }

</style>

<div class="chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <form method="get" asp-action="Chat">
            <select name="projectId" class="form-select mb-3" onchange="this.form.submit()">
                <option value="">Tất cả dự án</option>
                @foreach (var p in Model.Projects)
                {
                    <option value="@p.ProjectID" selected="@(Model.SelectedProjectID == p.ProjectID)">
                        @p.Title
                    </option>
                }
            </select>
        </form>

        @foreach (var c in Model.Conversations)
        {
            <div class="conversation-card" onclick="location.href='@Url.Action("Chat", new { conversationId = c.ConversationID, projectId = Model.SelectedProjectID })'">
                <div class="conversation-title">
                    @c.OtherUserName
                    @if (c.UnreadCount > 0)
                    {
                        <span class="conversation-badge">@c.UnreadCount</span>
                    }
                </div>
                <div class="conversation-meta">Dự Án: @c.ProjectTitle</div>
                
            </div>
        }
    </div>

    <!-- Chat Area -->
    <div class="chat-area">
        @if (Model.ChatRoom != null)
        {
            <div class="chat-header">@Model.ChatRoom.OtherUserName</div>
            <div class="chat-body" id="chatWindow">
                @foreach (var m in Model.ChatRoom.Messages)
                {
                    var alignment = m.IsMine ? "justify-content-end" : "justify-content-start";
                    var bubbleClass = m.IsMine ? "message-box message-right text-end" : "message-box message-left";

                    var contentHtml = m.MessageType switch
                    {
                        "image" => $"<img src='{m.Content}' style='max-width:200px; border-radius:8px;' />",
                        "file" => $"<a href='{m.Content}' target='_blank'>📄 File đính kèm</a>",
                        _ => m.Content
                    };

                    <div class="d-flex @alignment mb-2">
                        <div class="@bubbleClass">
                            @Html.Raw(contentHtml)
                            <div class="message-meta">@m.SentAt.ToLocalTime().ToString("HH:mm dd/MM")</div>
                        </div>
                    </div>
                }
            </div>


            <div class="chat-footer">
                <form id="chatForm" class="d-flex w-100">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="conversationId" name="conversationID" value="@Model.ChatRoom.ConversationID" />
                    <input type="text" id="messageInput" name="content" class="form-control me-2" placeholder="Nhập tin nhắn..." autocomplete="off" />
                    <label for="fileInput" class="btn btn-outline-secondary me-2" title="Đính kèm">
                        📎
                    </label>
                    <input type="file" id="fileInput" class="d-none" />
                    <button id="sendBtn" type="button" class="send-button">Gửi</button>
                </form>

            </div>
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <h5>Hãy chọn một cuộc trò chuyện để bắt đầu.</h5>
            </div>
        }
    </div>
    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
        <script>
            const chatWindow = document.getElementById("chatWindow");
            const currentUserId = parseInt("@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value");
            const convId = "@Model.ChatRoom?.ConversationID";

            function scrollToBottom() {
                if (chatWindow)
                    chatWindow.scrollTop = chatWindow.scrollHeight;
            }
            scrollToBottom();

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .build();

            connection.on("ReceiveMessage", msg => {
                if (msg.conversationID != convId) return;

                let messageHtml = "";
                if (msg.content.match(/\.(jpg|jpeg|png|gif)$/i)) {
                    messageHtml = `<img src="${msg.content}" style="max-width: 200px; border-radius: 8px;" />`;
                } else if (msg.content.match(/\.(docx?|pdf)$/i)) {
                    messageHtml = `<a href="${msg.content}" target="_blank">📄 File đính kèm</a>`;
                } else {
                    messageHtml = msg.content;
                }

                const msgBox = document.createElement("div");
                msgBox.className = "message-box " + (msg.senderId === currentUserId ? "message-right ms-auto" : "message-left");
                msgBox.innerHTML = `
                    ${messageHtml}
                    <div style="font-size: 0.8rem; color: gray; margin-top: 4px;">
                        ${new Date(msg.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} ${new Date(msg.sentAt).toLocaleDateString()}
                    </div>
                `;

                chatWindow.appendChild(msgBox);
                scrollToBottom();
            });

            (async function () {
                try {
                    await connection.start();
                    if (convId) {
                        await connection.invoke("JoinConversation", convId);
                    }
                } catch (err) {
                    console.error("SignalR lỗi:", err);
                }
            })();

            // Gửi tin nhắn
            document.getElementById("sendBtn").addEventListener("click", sendMessage);
            document.getElementById("messageInput").addEventListener("keydown", function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    sendMessage();
                }
            });

            async function sendMessage() {
                const input = document.getElementById("messageInput");
                const fileInput = document.getElementById("fileInput");
                const file = fileInput.files[0];
                const text = input.value.trim();

                if (!convId) return;

                // Nếu có file
                if (file) {
                    const formData = new FormData();
                    formData.append("file", file);
                    formData.append("conversationId", convId);

                    try {
                        const res = await fetch("/Upload/UploadFile", {
                            method: "POST",
                            body: formData
                        });

                        const data = await res.json();
                        const fileUrl = data.fileUrl;

                        // Gửi SignalR
                        await connection.invoke("SendMessage", convId, currentUserId, fileUrl);

                        // Gửi về server
                        await fetch('@Url.Action("Send", "Chat")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: `conversationID=${encodeURIComponent(convId)}&content=${encodeURIComponent(fileUrl)}`
                        });

                        fileInput.value = "";
                    } catch (err) {
                        alert("Gửi file thất bại: " + err.message);
                    }

                    return;
                }

                // Nếu là tin nhắn văn bản
                if (!text) return;

                try {
                    await connection.invoke("SendMessage", convId, currentUserId, text);
                    await fetch('@Url.Action("Send", "Chat")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: `conversationID=${encodeURIComponent(convId)}&content=${encodeURIComponent(text)}`
                    });
                } catch (err) {
                    console.error("Lỗi gửi tin nhắn:", err);
                }

                input.value = "";
                input.focus();
            }
        </script>
    }

</div>
